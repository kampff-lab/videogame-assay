<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ode.Net</name>
    </assembly>
    <members>
        <member name="T:Ode.Net.Body">
            <summary>
            Represents a rigid body.
            </summary>
        </member>
        <member name="M:Ode.Net.Body.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Body"/> class on the
            specified world.
            </summary>
            <param name="world">The world on which to place the body.</param>
        </member>
        <member name="M:Ode.Net.Body.SetAutoDisableDefaults">
            <summary>
            Sets the auto-disable parameters to those set as default for the world.
            </summary>
        </member>
        <member name="M:Ode.Net.Body.SetDampingDefaults">
            <summary>
            Sets the damping parameters to those set as default for the world.
            </summary>
        </member>
        <member name="M:Ode.Net.Body.SetDamping(System.Double,System.Double)">
            <summary>
            Sets both linear and angular damping scales.
            </summary>
            <param name="linearScale">
            The linear damping scale that is to be applied to the rigid body.
            </param>
            <param name="angularScale">
            The angular damping scale that is to be applied to the rigid body.
            </param>
        </member>
        <member name="M:Ode.Net.Body.GetPosition(Ode.Net.Vector3@)">
            <summary>
            Gets the position of the rigid body.
            </summary>
            <param name="position">The position of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.SetPosition(Ode.Net.Vector3@)">
            <summary>
            Sets the position of the rigid body.
            </summary>
            <param name="position">The position of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.GetRotation(Ode.Net.Matrix3@)">
            <summary>
            Gets the 3x3 rotation matrix of the rigid body.
            </summary>
            <param name="rotation">The 3x3 rotation matrix of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.SetRotation(Ode.Net.Matrix3@)">
            <summary>
            Sets the 3x3 rotation matrix of the rigid body.
            </summary>
            <param name="rotation">The 3x3 rotation matrix of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.GetQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Gets the orientation quaternion of the rigid body.
            </summary>
            <param name="quaternion">The orientation quaternion of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.SetQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Sets the orientation quaternion of the rigid body.
            </summary>
            <param name="quaternion">The orientation quaternion of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.GetLinearVelocity(Ode.Net.Vector3@)">
            <summary>
            Gets the linear velocity of the rigid body.
            </summary>
            <param name="linearVelocity">The linear velocity of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.SetLinearVelocity(Ode.Net.Vector3@)">
            <summary>
            Sets the linear velocity of the rigid body.
            </summary>
            <param name="linearVelocity">The linear velocity of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.GetAngularVelocity(Ode.Net.Vector3@)">
            <summary>
            Gets the angular velocity of the rigid body.
            </summary>
            <param name="angularVelocity">The angular velocity of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.SetAngularVelocity(Ode.Net.Vector3@)">
            <summary>
            Sets the angular velocity of the rigid body.
            </summary>
            <param name="angularVelocity">The angular velocity of the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.AddForce(Ode.Net.Vector3)">
            <summary>
            Adds force at the center of mass of the body.
            </summary>
            <param name="force">The force vector in the world coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddForce(System.Double,System.Double,System.Double)">
            <summary>
            Adds force at the center of mass of the body.
            </summary>
            <param name="fx">The x-component of the force vector in the world coordinate system.</param>
            <param name="fy">The y-component of the force vector in the world coordinate system.</param>
            <param name="fz">The z-component of the force vector in the world coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddTorque(Ode.Net.Vector3)">
            <summary>
            Adds torque at the center of mass of the body.
            </summary>
            <param name="torque">The torque vector in the world coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddTorque(System.Double,System.Double,System.Double)">
            <summary>
            Adds torque at the center of mass of the body.
            </summary>
            <param name="fx">The x-component of the torque vector in the world coordinate system.</param>
            <param name="fy">The y-component of the torque vector in the world coordinate system.</param>
            <param name="fz">The z-component of the torque vector in the world coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeForce(Ode.Net.Vector3)">
            <summary>
            Adds force at the center of mass of the body.
            </summary>
            <param name="force">The force vector in the body's coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeForce(System.Double,System.Double,System.Double)">
            <summary>
            Adds force at the center of mass of the body.
            </summary>
            <param name="fx">The x-component of the force vector in the body's coordinate system.</param>
            <param name="fy">The y-component of the force vector in the body's coordinate system.</param>
            <param name="fz">The z-component of the force vector in the body's coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeTorque(Ode.Net.Vector3)">
            <summary>
            Adds torque at the center of mass of the body.
            </summary>
            <param name="torque">The torque vector in the body's coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeTorque(System.Double,System.Double,System.Double)">
            <summary>
            Adds torque at the center of mass of the body.
            </summary>
            <param name="fx">The x-component of the torque vector in the body's coordinate system.</param>
            <param name="fy">The y-component of the torque vector in the body's coordinate system.</param>
            <param name="fz">The z-component of the torque vector in the body's coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.AddForceAtPosition(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="force">The force vector in the world coordinate system.</param>
            <param name="position">The point of application in global coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddForceAtPosition(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="fx">The x-component of the force vector in the world coordinate system.</param>
            <param name="fy">The y-component of the force vector in the world coordinate system.</param>
            <param name="fz">The z-component of the force vector in the world coordinate system.</param>
            <param name="px">The x-component of the application point in global coordinates.</param>
            <param name="py">The y-component of the application point in global coordinates.</param>
            <param name="pz">The z-component of the application point in global coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddForceAtRelativePosition(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="force">The force vector in the world coordinate system.</param>
            <param name="position">The point of application in body relative coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddForceAtRelativePosition(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="fx">The x-component of the force vector in the world coordinate system.</param>
            <param name="fy">The y-component of the force vector in the world coordinate system.</param>
            <param name="fz">The z-component of the force vector in the world coordinate system.</param>
            <param name="px">The x-component of the application point in body relative coordinates.</param>
            <param name="py">The y-component of the application point in body relative coordinates.</param>
            <param name="pz">The z-component of the application point in body relative coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeForceAtPosition(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="force">The force vector in the body's coordinate system.</param>
            <param name="position">The point of application in global coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeForceAtPosition(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="fx">The x-component of the force vector in the body's coordinate system.</param>
            <param name="fy">The y-component of the force vector in the body's coordinate system.</param>
            <param name="fz">The z-component of the force vector in the body's coordinate system.</param>
            <param name="px">The x-component of the application point in global coordinates.</param>
            <param name="py">The y-component of the application point in global coordinates.</param>
            <param name="pz">The z-component of the application point in global coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeForceAtRelativePosition(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="force">The force vector in the body's coordinate system.</param>
            <param name="position">The point of application in body relative coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.AddRelativeForceAtRelativePosition(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds force to the body applied at the specified position.
            </summary>
            <param name="fx">The x-component of the force vector in the body's coordinate system.</param>
            <param name="fy">The y-component of the force vector in the body's coordinate system.</param>
            <param name="fz">The z-component of the force vector in the body's coordinate system.</param>
            <param name="px">The x-component of the application point in body relative coordinates.</param>
            <param name="py">The y-component of the application point in body relative coordinates.</param>
            <param name="pz">The z-component of the application point in body relative coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.GetForce(Ode.Net.Vector3@)">
            <summary>
            Gets the current accumulated force vector.
            </summary>
            <param name="force">The current accumulated force vector.</param>
        </member>
        <member name="M:Ode.Net.Body.SetForce(Ode.Net.Vector3@)">
            <summary>
            Sets the current accumulated force vector.
            </summary>
            <param name="force">The current accumulated force vector.</param>
        </member>
        <member name="M:Ode.Net.Body.GetTorque(Ode.Net.Vector3@)">
            <summary>
            Gets the current accumulated torque vector.
            </summary>
            <param name="torque">The current accumulated torque vector.</param>
        </member>
        <member name="M:Ode.Net.Body.SetTorque(Ode.Net.Vector3@)">
            <summary>
            Sets the current accumulated torque vector.
            </summary>
            <param name="torque">The current accumulated torque vector.</param>
        </member>
        <member name="M:Ode.Net.Body.GetRelativePointPosition(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Computes the global position of a point specified in body relative coordinates.
            </summary>
            <param name="point">A point specified in body relative coordinates.</param>
            <param name="result">The position of the point in global coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.GetRelativePointPosition(Ode.Net.Vector3)">
            <summary>
            Computes the global position of a point specified in body relative coordinates.
            </summary>
            <param name="point">A point specified in body relative coordinates.</param>
            <returns>The position of the point in global coordinates.</returns>
        </member>
        <member name="M:Ode.Net.Body.GetRelativePointVelocity(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Computes the velocity of a point specified in body relative coordinates.
            </summary>
            <param name="point">A point specified in body relative coordinates.</param>
            <param name="result">The velocity of the point.</param>
        </member>
        <member name="M:Ode.Net.Body.GetRelativePointVelocity(Ode.Net.Vector3)">
            <summary>
            Computes the velocity of a point specified in body relative coordinates.
            </summary>
            <param name="point">A point specified in body relative coordinates.</param>
            <returns>The velocity of the point.</returns>
        </member>
        <member name="M:Ode.Net.Body.GetPointVelocity(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Computes the velocity of a point specified in global coordinates.
            </summary>
            <param name="point">A point specified in global coordinates.</param>
            <param name="result">The velocity of the point.</param>
        </member>
        <member name="M:Ode.Net.Body.GetPointVelocity(Ode.Net.Vector3)">
            <summary>
            Computes the velocity of a point specified in global coordinates.
            </summary>
            <param name="point">A point specified in global coordinates.</param>
            <returns>The velocity of the point.</returns>
        </member>
        <member name="M:Ode.Net.Body.GetPositionRelativePoint(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Computes the body relative position of a point specified in global coordinates.
            </summary>
            <param name="position">A point specified in global coordinates.</param>
            <param name="result">The position of the point in body relative coordinates.</param>
        </member>
        <member name="M:Ode.Net.Body.GetPositionRelativePoint(Ode.Net.Vector3)">
            <summary>
            Computes the body relative position of a point specified in global coordinates.
            </summary>
            <param name="position">A point specified in global coordinates.</param>
            <returns>The position of the point in body relative coordinates.</returns>
        </member>
        <member name="M:Ode.Net.Body.VectorToWorld(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Given a vector expressed in the body's coordinate system, rotate it to the
            world coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the body's coordinate system.</param>
            <param name="result">The rotated vector in the world coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.VectorToWorld(Ode.Net.Vector3)">
            <summary>
            Given a vector expressed in the body's coordinate system, rotate it to the
            world coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the body's coordinate system.</param>
            <returns>The rotated vector in the world coordinate system.</returns>
        </member>
        <member name="M:Ode.Net.Body.VectorFromWorld(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Given a vector expressed in the world coordinate system, rotate it to the
            body's coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the world coordinate system.</param>
            <param name="result">The rotated vector in the body's coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Body.VectorFromWorld(Ode.Net.Vector3)">
            <summary>
            Given a vector expressed in the world coordinate system, rotate it to the
            body's coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the world coordinate system.</param>
            <returns>The rotated vector in the body's coordinate system.</returns>
        </member>
        <member name="M:Ode.Net.Body.SetFiniteRotationAxis(Ode.Net.Vector3@)">
            <summary>
            Sets the finite rotation axis for the rigid body.
            </summary>
            <param name="axis">The finite rotation axis for the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.GetFiniteRotationAxis(Ode.Net.Vector3@)">
            <summary>
            Gets the finite rotation axis for the rigid body.
            </summary>
            <param name="axis">The finite rotation axis for the rigid body.</param>
        </member>
        <member name="M:Ode.Net.Body.GetConnectingJoint(Ode.Net.Body)">
            <summary>
            Gets the first joint connecting this body to another specified rigid body.
            </summary>
            <param name="body">The body to get a connecting joint for.</param>
            <returns>
            The first connecting joint between the two bodies, if one exists;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Body.GetConnectingJoints(Ode.Net.Body)">
            <summary>
            Gets the collection of joints connecting this body to another
            specified rigid body.
            </summary>
            <param name="body">The body to get connecting joints for.</param>
            <returns>
            The collection of joints connecting the two bodies.
            </returns>
        </member>
        <member name="M:Ode.Net.Body.AreConnected(Ode.Net.Body,Ode.Net.Body)">
            <summary>
            Tests whether two bodies are connected together by a joint.
            </summary>
            <param name="body1">The first body to test.</param>
            <param name="body2">The second body to test.</param>
            <returns>
            <b>true</b> if the two bodies are connected together by a joint;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Body.AreConnectedExcluding(Ode.Net.Body,Ode.Net.Body,Ode.Net.Joints.JointType)">
            <summary>
            Tests whether two bodies are connected together by a joint that does
            not have the specified type.
            </summary>
            <param name="body1">The first body to test.</param>
            <param name="body2">The second body to test.</param>
            <param name="jointType">The type of joints to exclude from the test.</param>
            <returns>
            <b>true</b> if the two bodies are connected together by a joint that
            does not have the specified type; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Body.Dispose">
            <summary>
            Destroys the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.World">
            <summary>
            Gets the world on which the body is placed.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AutoDisableLinearThreshold">
            <summary>
            Gets or sets the auto-disable linear velocity threshold for the body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AutoDisableAngularThreshold">
            <summary>
            Gets or sets the auto-disable angular velocity threshold for the body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AutoDisableAverageSamplesCount">
            <summary>
            Gets or sets the auto-disable average velocity sample count for the body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AutoDisableSteps">
            <summary>
            Gets or sets the number of simulation steps the body has to be idle for
            in order to automatically disable itself.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AutoDisableTime">
            <summary>
            Gets or sets the amount of simulation time the body has to be idle for
            in order to automatically disable itself.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AutoDisable">
            <summary>
            Gets or sets a value indicating whether the body should automatically
            disable itself when it has been idle for some specified period of time.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Tag">
            <summary>
            Gets or sets the object that contains data about the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Position">
            <summary>
            Gets or sets the position of the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Rotation">
            <summary>
            Gets or sets the 3x3 rotation matrix of the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Quaternion">
            <summary>
            Gets or sets the orientation quaternion of the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Mass">
            <summary>
            Gets or sets the mass of the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Force">
            <summary>
            Gets or sets the current accumulated force vector.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Torque">
            <summary>
            Gets or sets the current accumulated torque vector.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.FiniteRotationMode">
            <summary>
            Gets or sets the mode in which the body's orientation is updated at each time step.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.FiniteRotationAxis">
            <summary>
            Gets or sets the finite rotation axis for the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Joints">
            <summary>
            Gets the collection of joints attached to the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Kinematic">
            <summary>
            Gets or sets a value indicating whether the rigid body is in
            kinematic state.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Enabled">
            <summary>
            Gets or sets a value indicating whether the rigid body is enabled.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.GravityMode">
            <summary>
            Gets or sets a value indicating whether the rigid body is influenced
            by the world's gravity.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.Geoms">
            <summary>
            Gets the collection of geoms associated with the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.LinearDamping">
            <summary>
            Gets or sets the rigid body's linear velocity damping scale.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AngularDamping">
            <summary>
            Gets or sets the rigid body's angular velocity damping scale.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.LinearDampingThreshold">
            <summary>
            Gets or sets the rigid body's linear velocity damping threshold.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.AngularDampingThreshold">
            <summary>
            Gets or sets the rigid body's angular velocity damping threshold.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.MaxAngularSpeed">
            <summary>
            Gets or sets the default maximum angular speed for the rigid body.
            </summary>
        </member>
        <member name="P:Ode.Net.Body.GyroscopicMode">
            <summary>
            Gets or sets a value indicating whether gyroscopic term computation is enabled.
            </summary>
        </member>
        <member name="E:Ode.Net.Body.Moved">
            <summary>
            Occurs whenever the rigid body has its position or rotation changed
            during a world timestep.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.BoundingBox.MinX">
            <summary>
            Specifies the minimum X coordinate of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.BoundingBox.MaxX">
            <summary>
            Specifies the maximum X coordinate of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.BoundingBox.MinY">
            <summary>
            Specifies the minimum Y coordinate of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.BoundingBox.MaxY">
            <summary>
            Specifies the maximum Y coordinate of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.BoundingBox.MinZ">
            <summary>
            Specifies the minimum Z coordinate of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.BoundingBox.MaxZ">
            <summary>
            Specifies the maximum Z coordinate of the axis-aligned bounding box.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.BoundingBox.Equals(Ode.Net.Collision.BoundingBox)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Collision.BoundingBox"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Collision.BoundingBox"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same minimum and maximum
            coordinates as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.BoundingBox.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Collision.BoundingBox"/> and
            has the same minimum and maximum coordinates as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.BoundingBox.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Collision.BoundingBox.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the minimum and maximum coordinates of this instance.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.BoundingBox.op_Equality(Ode.Net.Collision.BoundingBox,Ode.Net.Collision.BoundingBox)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Collision.BoundingBox"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Collision.BoundingBox"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Collision.BoundingBox"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            equal minimum and maximum coordinates; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.BoundingBox.op_Inequality(Ode.Net.Collision.BoundingBox,Ode.Net.Collision.BoundingBox)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Collision.BoundingBox"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Collision.BoundingBox"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Collision.BoundingBox"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ
            in their minimum and maximum coordinates; <b>false</b> if <paramref name="left"/>
            and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Ode.Net.Collision.Box">
            <summary>
            Represents a box geom.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.Geom">
            <summary>
            Represents a geometry object, or geom, used for collision detection.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetPosition(Ode.Net.Vector3@)">
            <summary>
            Gets the position of the geom.
            </summary>
            <param name="position">The position of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetPosition(Ode.Net.Vector3@)">
            <summary>
            Sets the position of the geom.
            </summary>
            <param name="position">The position of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetRotation(Ode.Net.Matrix3@)">
            <summary>
            Gets the 3x3 rotation matrix of the geom.
            </summary>
            <param name="rotation">The 3x3 rotation matrix of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetRotation(Ode.Net.Matrix3@)">
            <summary>
            Sets the 3x3 rotation matrix of the geom.
            </summary>
            <param name="rotation">The 3x3 rotation matrix of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Gets the orientation quaternion of the geom.
            </summary>
            <param name="quaternion">The orientation quaternion of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Sets the orientation quaternion of the geom.
            </summary>
            <param name="quaternion">The orientation quaternion of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetRelativePointPosition(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Computes the global position of a point specified in geom relative coordinates.
            </summary>
            <param name="point">A point specified in geom relative coordinates.</param>
            <param name="result">The position of the point in global coordinates.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetRelativePointPosition(Ode.Net.Vector3)">
            <summary>
            Computes the global position of a point specified in geom relative coordinates.
            </summary>
            <param name="point">A point specified in geom relative coordinates.</param>
            <returns>The position of the point in global coordinates.</returns>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetPositionRelativePoint(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Computes the geom relative position of a point specified in global coordinates.
            </summary>
            <param name="position">A point specified in global coordinates.</param>
            <param name="result">The position of the point in geom relative coordinates.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetPositionRelativePoint(Ode.Net.Vector3)">
            <summary>
            Computes the geom relative position of a point specified in global coordinates.
            </summary>
            <param name="position">A point specified in global coordinates.</param>
            <returns>The position of the point in geom relative coordinates.</returns>
        </member>
        <member name="M:Ode.Net.Collision.Geom.VectorToWorld(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Given a vector expressed in the geom's coordinate system, rotate it to the
            world coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the geom's coordinate system.</param>
            <param name="result">The rotated vector in the world coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.VectorToWorld(Ode.Net.Vector3)">
            <summary>
            Given a vector expressed in the geom's coordinate system, rotate it to the
            world coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the geom's coordinate system.</param>
            <returns>The rotated vector in the world coordinate system.</returns>
        </member>
        <member name="M:Ode.Net.Collision.Geom.VectorFromWorld(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Given a vector expressed in the world coordinate system, rotate it to the
            geom's coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the world coordinate system.</param>
            <param name="result">The rotated vector in the geom's coordinate system.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.VectorFromWorld(Ode.Net.Vector3)">
            <summary>
            Given a vector expressed in the world coordinate system, rotate it to the
            geom's coordinate system.
            </summary>
            <param name="vector">The vector to rotate in the world coordinate system.</param>
            <returns>The rotated vector in the geom's coordinate system.</returns>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetOffsetPosition(Ode.Net.Vector3@)">
            <summary>
            Gets the local offset position of the geom from its body.
            </summary>
            <param name="position">The offset position of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetOffsetPosition(Ode.Net.Vector3@)">
            <summary>
            Sets the local offset position of the geom from its body.
            </summary>
            <param name="position">The offset position of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetOffsetRotation(Ode.Net.Matrix3@)">
            <summary>
            Gets the local offset rotation matrix of the geom from its body.
            </summary>
            <param name="rotation">The 3x3 offset rotation matrix of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetOffsetRotation(Ode.Net.Matrix3@)">
            <summary>
            Sets the local offset rotation matrix of the geom from its body.
            </summary>
            <param name="rotation">The 3x3 offset rotation matrix of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.GetOffsetQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Gets the local offset orientation quaternion of the geom from its body.
            </summary>
            <param name="quaternion">The offset orientation quaternion of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetOffsetQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Sets the local offset orientation quaternion of the geom from its body.
            </summary>
            <param name="quaternion">The offset orientation quaternion of the geom.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetOffsetWorldPosition(Ode.Net.Vector3@)">
            <summary>
            Sets the offset position of the geom from its body such that the
            geom will be moved to the specified world coordinates.
            </summary>
            <param name="position">The offset position of the geom, in world coordinates.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetOffsetWorldRotation(Ode.Net.Matrix3@)">
            <summary>
            Sets the offset rotation matrix of the geom from its body such that the
            geom will be oriented to the specified world rotation matrix.
            </summary>
            <param name="rotation">The 3x3 offset rotation matrix of the geom, in world frame.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.SetOffsetWorldQuaternion(Ode.Net.Quaternion@)">
            <summary>
            Sets the offset orientation quaternion of the geom from its body such that the
            geom will be oriented to the specified world quaternion.
            </summary>
            <param name="quaternion">The offset orientation quaternion of the geom, in world frame.</param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.ClearOffset">
            <summary>
            Clears any offset from the geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Geom.Collide(Ode.Net.Collision.Geom,Ode.Net.Collision.Geom,Ode.Net.Collision.ContactGeom[])">
            <summary>
            Generates contact information between two specified geoms that potentially intersect.
            </summary>
            <param name="geom1">The first geom to test for contact.</param>
            <param name="geom2">The second geom to test for contact.</param>
            <param name="contacts">
            The array that will hold contact information. The length of the array determines
            the maximum number of contacts that can be generated.
            </param>
            <returns>
            The number of generated contact points, if the geoms intersect; otherwise, zero.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.Geom.Collide(Ode.Net.Collision.Geom,Ode.Net.Collision.Geom,Ode.Net.Collision.ContactGeom[],Ode.Net.Collision.ContactGenerationFlags)">
            <summary>
            Generates contact information between two specified geoms that potentially intersect.
            </summary>
            <param name="geom1">The first geom to test for contact.</param>
            <param name="geom2">The second geom to test for contact.</param>
            <param name="contacts">
            The array that will hold contact information. The length of the array determines
            the maximum number of contacts that can be generated.
            </param>
            <param name="flags">Specifies contact generation options.</param>
            <returns>
            The number of generated contact points, if the geoms intersect; otherwise, zero.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.Geom.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Ode.Net.Collision.Geom"/> class
            specifying whether to perform a normal dispose operation.
            </summary>
            <param name="disposing">
            <b>true</b> for a normal dispose operation; <b>false</b> to finalize
            the geom.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Geom.Dispose">
            <summary>
            Destroys the geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Tag">
            <summary>
            Gets or sets the object that contains data about the geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Body">
            <summary>
            Gets or sets the rigid body associated with a placeable geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Position">
            <summary>
            Gets or sets the position vector of the placeable geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Rotation">
            <summary>
            Gets or sets the rotation matrix of the placeable geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Quaternion">
            <summary>
            Gets or sets the orientation quaternion of the geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.AxisAlignedBoundingBox">
            <summary>
            Gets the axis aligned bounding box that surrounds the geom. If the geom is a space,
            the bounding box that surrounds all contained geoms is returned.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Space">
            <summary>
            Gets the space in which the geom is contained.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Class">
            <summary>
            Gets the geom class code.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.CategoryBits">
            <summary>
            Gets or sets the category bitfield for the geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.CollideBits">
            <summary>
            Gets or sets the collide bitfield for the geom.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.Enabled">
            <summary>
            Gets or sets a value indicating whether the geom is enabled.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.OffsetPosition">
            <summary>
            Gets or sets the local offset position of a geom from its body.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.OffsetRotation">
            <summary>
            Gets or sets the local offset rotation matrix of a geom from its body.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.OffsetQuaternion">
            <summary>
            Gets or sets the local offset orientation quaternion of a geom from its body.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Geom.IsOffset">
            <summary>
            Gets a value indicating whether the geom has an offset.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Box.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Box"/> class with the
            specified dimensions.
            </summary>
            <param name="lengthX">The length of the box along the X axis.</param>
            <param name="lengthY">The length of the box along the Y axis.</param>
            <param name="lengthZ">The length of the box along the Z axis.</param>
        </member>
        <member name="M:Ode.Net.Collision.Box.#ctor(Ode.Net.Collision.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Box"/> class on the
            given space and with the specified dimensions.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="lengthX">The length of the box along the X axis.</param>
            <param name="lengthY">The length of the box along the Y axis.</param>
            <param name="lengthZ">The length of the box along the Z axis.</param>
        </member>
        <member name="M:Ode.Net.Collision.Box.PointDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the depth of the specified point within the box.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <param name="z">The z-coordinate of the point to test.</param>
            <returns>
            The depth of the point. Points inside the box will have a
            positive depth, points outside it will have a negative depth,
            and points on the surface will have a depth of zero.
            </returns>
        </member>
        <member name="P:Ode.Net.Collision.Box.Lengths">
            <summary>
            Gets or sets the box dimensions along the X, Y and Z axes.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.Capsule">
            <summary>
            Represents a capsule geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Capsule.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Capsule"/> class with the
            specified radius and length.
            </summary>
            <param name="radius">The radius of the capsule.</param>
            <param name="length">The length of the capsule.</param>
        </member>
        <member name="M:Ode.Net.Collision.Capsule.#ctor(Ode.Net.Collision.Space,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Capsule"/> class on the
            given space and with the specified radius and length.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="length">The length of the capsule.</param>
        </member>
        <member name="M:Ode.Net.Collision.Capsule.PointDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the depth of the specified point within the capsule.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <param name="z">The z-coordinate of the point to test.</param>
            <returns>
            The depth of the point. Points inside the capsule will have a
            positive depth, points outside it will have a negative depth,
            and points on the surface will have a depth of zero.
            </returns>
        </member>
        <member name="P:Ode.Net.Collision.Capsule.Radius">
            <summary>
            Gets or sets the radius of the capsule.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Capsule.Length">
            <summary>
            Gets or sets the length of the capsule.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.ContactInfo">
            <summary>
            Represents information about the surface properties and geometry
            of a contact point.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactInfo.Surface">
            <summary>
            Specifies properties of the colliding surface.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactInfo.Geometry">
            <summary>
            Specifies the geometric properties of the contact point.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactInfo.FrictionDirection1">
            <summary>
            Specifies the direction along which frictional force is applied.
            </summary>
            <remarks>
            It must be of unit length and perpendicular to the contact normal
            (so it is typically tangential to the contact surface). It should
            only be defined if the FrictionDirection1 mode is set in Surface.Mode.
            The "second friction direction" is a vector computed to be
            perpendicular to both the contact normal and FrictionDirection1.
            </remarks>
        </member>
        <member name="T:Ode.Net.Collision.ContactGenerationFlags">
            <summary>
            Specifies contact generation flags.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactGenerationFlags.None">
            <summary>
            Specifies that no contact generation flags are active.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactGenerationFlags.ContactsUnimportant">
            <summary>
            Specifies that no contact refinement should be used and any contacts
            found should be returned as soon as possible.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.ContactGeom">
            <summary>
            Represents the geometry of a contact point between two inter-penetrating bodies.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactGeom.Position">
            <summary>
            Specifies the contact position, in global coordinates.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactGeom.Normal">
            <summary>
            Specifies a unit length vector that is, generally speaking, perpendicular
            to the contact surface.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactGeom.Depth">
            <summary>
            Specifies the depth to which the two bodies inter-penetrate each other.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactGeom.Side1">
            <summary>
            Specifies an additional information field for the first collision geom.
            </summary>
            <remarks>
            The side field gives additional information about what part of the
            geom collided. It is only currently used for trimeshes, indicating
            the triangle index of the collision.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.ContactGeom.Side2">
            <summary>
            Specifies an additional information field for the second collision geom.
            </summary>
            <remarks>
            The side field gives additional information about what part of the
            geom collided. It is only currently used for trimeshes, indicating
            the triangle index of the collision.
            </remarks>
        </member>
        <member name="P:Ode.Net.Collision.ContactGeom.Geom1">
            <summary>
            Gets or sets the first colliding geometry object.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.ContactGeom.Geom2">
            <summary>
            Gets or sets the second colliding geometry object.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.ContactModes">
            <summary>
            Specifies the contact modes for a collision surface.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Mu2">
            <summary>
            Specifies whether to use axis dependent friction. If set, use Mu for friction
            direction 1, use Mu2 for friction direction 2.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.FrictionDirection1">
            <summary>
            Specifies whether to take FrictionDirection1 as friction direction 1, otherwise
            automatically compute friction direction 1 to be perpendicular to the contact normal.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Bounce">
            <summary>
            Specifies whether the contact surface is bouncy. The exact amount of bouncyness
            is controlled by the bounce parameter.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.SoftErp">
            <summary>
            Specifies whether the error reduction parameter of the contact normal can be set
            with the SoftERP parameter. This is useful to make surfaces soft.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.SoftCfm">
            <summary>
            Specifies whether the constraint force mixing parameter of the contact normal can
            be set with the SoftCFM parameter. This is useful to make surfaces soft.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Motion1">
            <summary>
            Specifies whether the contact surface is assumed to be moving independently of the
            motion of the bodies, like a conveyor belt running over the surface. When this flag
            is set, Motion1 defines the surface velocity in friction direction 1.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Motion2">
            <summary>
            Specifies whether the contact surface is assumed to be moving independently of the
            motion of the bodies, like a conveyor belt running over the surface. When this flag
            is set, Motion2 defines the surface velocity in friction direction 2.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.MotionN">
            <summary>
            Specifies whether the contact surface is assumed to be moving independently of the
            motion of the bodies, like a conveyor belt running over the surface. When this flag
            is set, MotionN defines the surface velocity in the direction of the contact normal.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Slip1">
            <summary>
            Specifies that force-dependent-slip (FDS) should be used in friction direction 1.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Slip2">
            <summary>
            Specifies that force-dependent-slip (FDS) should be used in friction direction 2.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Rolling">
            <summary>
            Specifies that rolling/angular friction should be used.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Approx0">
            <summary>
            Specifies that the default constant-force-limit approximation should
            be used for all friction directions.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Approx11">
            <summary>
            Specifies that the friction pyramid approximation should be used for
            friction direction 1.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Approx12">
            <summary>
            Specifies that the friction pyramid approximation should be used for
            friction direction 2.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Approx1N">
            <summary>
            Specifies that the friction pyramid approximation should be used for
            rolling around normal.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.ContactModes.Approx1">
            <summary>
            Specifies that the friction pyramid approximation should be used for
            all friction directions.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.Convex">
            <summary>
            Represents a convex hull geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Convex.#ctor(System.Double[],System.Double[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Convex"/> class with the
            specified convex hull data.
            </summary>
            <param name="planes">
            The planes' definition array. Each polygon in the convex hull will be
            attached to one of these planes. Each plane is defined by a quadruplet
            of the a, b, c and d parameters of the plane equation.
            </param>
            <param name="points">
            The array of points, aligned in triplets of x, y and z components.
            </param>
            <param name="polygons">
            The polygons' definition array. Each element in the array is an index
            to a previously defined point in the array of point triplets.
            Each polygon definition sequence begins and ends in the same point.
            There must be as many polygon definition sequences as the number of planes.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Convex.#ctor(Ode.Net.Collision.Space,System.Double[],System.Double[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Convex"/> class on the
            given space and with the specified convex hull data.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="planes">
            The planes' definition array. Each polygon in the convex hull will be
            attached to one of these planes. Each plane is defined by a quadruplet
            of the a, b, c and d parameters of the plane equation.
            </param>
            <param name="points">
            The array of points, aligned in triplets of x, y and z components.
            </param>
            <param name="polygons">
            The polygons' definition array. Each element in the array is an index
            to a previously defined point in the array of point triplets.
            Each polygon definition sequence begins and ends in the same point.
            There must be as many polygon definition sequences as the number of planes.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Convex.SetConvex(System.Double[],System.Double[],System.Int32[])">
            <summary>
            Sets the convex hull data.
            </summary>
            <param name="planes">
            The planes' definition array. Each polygon in the convex hull will be
            attached to one of these planes. Each plane is defined by a quadruplet
            of the a, b, c and d parameters of the plane equation.
            </param>
            <param name="points">
            The array of points, aligned in triplets of x, y and z components.
            </param>
            <param name="polygons">
            The polygons' definition array. Each element in the array is an index
            to a previously defined point in the array of point triplets.
            Each polygon definition sequence begins and ends in the same point.
            There must be as many polygon definition sequences as the number of planes.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Convex.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Ode.Net.Collision.Convex"/> class
            specifying whether to perform a normal dispose operation.
            </summary>
            <param name="disposing">
            <b>true</b> for a normal dispose operation; <b>false</b> to finalize
            the geom.
            </param>
        </member>
        <member name="T:Ode.Net.Collision.Cylinder">
            <summary>
            Represents a regular flat-ended cylinder geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Cylinder.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Cylinder"/> class with the
            specified radius and length.
            </summary>
            <param name="radius">The radius of the cylinder.</param>
            <param name="length">The length of the cylinder.</param>
        </member>
        <member name="M:Ode.Net.Collision.Cylinder.#ctor(Ode.Net.Collision.Space,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Cylinder"/> class on the
            given space and with the specified radius and length.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="length">The length of the cylinder.</param>
        </member>
        <member name="P:Ode.Net.Collision.Cylinder.Radius">
            <summary>
            Gets or sets the radius of the cylinder.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Cylinder.Length">
            <summary>
            Gets or sets the length of the cylinder.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.GeomClass">
            <summary>
            Specifies the class identifier of a geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Sphere">
            <summary>
            A sphere geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Box">
            <summary>
            A box geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Capsule">
            <summary>
            A capsule geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Cylinder">
            <summary>
            A regular flat-ended cylinder geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Plane">
            <summary>
            An infinite (non-placeable) plane geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Ray">
            <summary>
            A ray geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Convex">
            <summary>
            A convex hull geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.GeomTransform">
            <summary>
            A geometry transform.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.TriMesh">
            <summary>
            A triangle mesh geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.Heightfield">
            <summary>
            A heightfield geom.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.FirstSpace">
            <summary>
            The identifier of the first space class.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.SimpleSpace">
            <summary>
            A simple collision space.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.HashSpace">
            <summary>
            A multi-resolution hash table collision space.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.SweepAndPruneSpace">
            <summary>
            A sweep-and-prune space.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.QuadTreeSpace">
            <summary>
            A quadtree space.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.LastSpace">
            <summary>
            The identifier of the last space class.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.FirstUserClass">
            <summary>
            The identifier of the first user class.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.LastUserClass">
            <summary>
            The identifier of the last user class.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.GeomClass.GeomNumClasses">
            <summary>
            The number of geometry classes.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.HashSpace">
            <summary>
            Represents a multi-resolution hash table collision space.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.Space">
            <summary>
            Represents a collision space.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Space.Add(Ode.Net.Collision.Geom)">
            <summary>
            Adds a geom to the space.
            </summary>
            <param name="geom">The geom to add to the space.</param>
        </member>
        <member name="M:Ode.Net.Collision.Space.Remove(Ode.Net.Collision.Geom)">
            <summary>
            Removes a geom from the space.
            </summary>
            <param name="geom">The geom to remove from the space.</param>
        </member>
        <member name="M:Ode.Net.Collision.Space.Contains(Ode.Net.Collision.Geom)">
            <summary>
            Determines whether the space contains the specified geom.
            </summary>
            <param name="geom">The geom to locate in the space.</param>
            <returns>
            <b>true</b> if the space contains the specified geom;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.Space.Clear">
            <summary>
            Removes all the geoms from the space.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Space.Collide(Ode.Net.Collision.NearCallback)">
            <summary>
            Determines which pairs of geoms in the space may potentially intersect,
            and calls the callback function with each candidate pair.
            </summary>
            <param name="callback">
            The callback function that will be called for each candidate pair.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Space.Collide(Ode.Net.Collision.Geom,Ode.Net.Collision.NearCallback)">
            <summary>
            Determines all potentially intersecting pairs between geoms from the space
            and the specified geom. The exact behavior depends on the type of the geom.
            </summary>
            <param name="geom">
            The geom to test for potential intersection with the space.
            </param>
            <param name="callback">
            The callback function that will be called for each candidate pair.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Space.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the space.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through
            the space.
            </returns>
        </member>
        <member name="P:Ode.Net.Collision.Space.Cleanup">
            <summary>
            Gets or sets a value indicating whether to automatically destroy all
            contained geoms when the space is destroyed.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Space.Sublevel">
            <summary>
            Gets or sets the sublevel value for the space.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Space.ManualCleanup">
            <summary>
            Gets or sets a value indicating whether the space is elligible for
            manual thread data cleanup.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.HashSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.HashSpace"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.HashSpace.#ctor(Ode.Net.Collision.Space)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.HashSpace"/> class.
            inside the specified space.
            </summary>
            <param name="space">The space which will contain the new hash space.</param>
        </member>
        <member name="P:Ode.Net.Collision.HashSpace.MinLevel">
            <summary>
            Gets or sets the minimum cell size level of the hash space.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.HashSpace.MaxLevel">
            <summary>
            Gets or sets the maximum cell size level of the hash space.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.Heightfield">
            <summary>
            Represents a heightfield geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Heightfield.#ctor(Ode.Net.Collision.HeightfieldData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Heightfield"/> class with the
            specified data.
            </summary>
            <param name="data">The heightfield data object.</param>
            <param name="placeable">
            <b>true</b> if this geom can be transformed in the world using the
            position and rotation functions; otherwise, the geom will have a fixed
            orientation where the global y-axis will represent height.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.Heightfield.#ctor(Ode.Net.Collision.Space,Ode.Net.Collision.HeightfieldData,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Heightfield"/> class on the
            given space and with the specified data.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="data">The heightfield data object.</param>
            <param name="placeable">
            <b>true</b> if this geom can be transformed in the world using the
            position and rotation functions; otherwise, the geom will have a fixed
            orientation where the global y-axis will represent height.
            </param>
        </member>
        <member name="P:Ode.Net.Collision.Heightfield.Data">
            <summary>
            Gets or sets the heightfield data object.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.HeightfieldData">
            <summary>
            Represents a data object which is used to store heightfield data.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.HeightfieldData"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildCallback(Ode.Net.Collision.HeightfieldGetHeight,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data by using a callback to determine the height of the
            field elements.
            </summary>
            <param name="callback">The function which will determine the height data.</param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildByte(System.Byte[],System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a byte array.
            </summary>
            <param name="heightData">The array containing the height data.</param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildByte(System.IntPtr,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a memory pointer.
            </summary>
            <param name="heightData">A pointer to the buffer containing the height data.</param>
            <param name="copy">
            If <b>true</b> an internal copy of the data is performed. Otherwise, only a reference
            to the data is stored.
            </param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildShort(System.Int16[],System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a 16-bit signed integer array.
            </summary>
            <param name="heightData">The array containing the height data.</param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildShort(System.IntPtr,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a 16-bit signed integer memory pointer.
            </summary>
            <param name="heightData">A pointer to the buffer containing the height data.</param>
            <param name="copy">
            If <b>true</b> an internal copy of the data is performed. Otherwise, only a reference
            to the data is stored.
            </param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildSingle(System.Single[],System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a single-precision floating point array.
            </summary>
            <param name="heightData">The array containing the height data.</param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildSingle(System.IntPtr,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a single-precision floating point memory pointer.
            </summary>
            <param name="heightData">A pointer to the buffer containing the height data.</param>
            <param name="copy">
            If <b>true</b> an internal copy of the data is performed. Otherwise, only a reference
            to the data is stored.
            </param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildDouble(System.Double[],System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a double-precision floating point array.
            </summary>
            <param name="heightData">The array containing the height data.</param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.BuildDouble(System.IntPtr,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds the heightfield data from a double-precision floating point memory pointer.
            </summary>
            <param name="heightData">A pointer to the buffer containing the height data.</param>
            <param name="copy">
            If <b>true</b> an internal copy of the data is performed. Otherwise, only a reference
            to the data is stored.
            </param>
            <param name="width">The total width of the heightfield along the local x axis.</param>
            <param name="depth">The total depth of the heightfield along the local z axis.</param>
            <param name="widthSamples">
            The number of vertices to sample along the width of the heightfield.
            </param>
            <param name="depthSamples">
            The number of vertices to sample along the depth of the heightfield.
            </param>
            <param name="scale">A uniform scale applied to all raw height data.</param>
            <param name="offset">An offset applied to the scaled height data.</param>
            <param name="thickness">
            A value subtracted from the lowest height which in effect adds an
            additional cuboid to the base of the heightfield. This is used to
            prevent geoms from looping under the desired terrain and not registering
            as a collision. Note that the thickness is not affected by the scale or
            offset parameters.
            </param>
            <param name="wrap">
            If <b>true</b> then the heightfield will infinitely tile in both directions
            along the local x and z axes. Otherwise, the heightfield is bounded from
            zero to <paramref name="width"/> in the local x axis, and zero to
            <paramref name="depth"/> in the local z axis.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.SetBounds(System.Double,System.Double)">
            <summary>
            Sets the minimum and maximum height bounds.
            </summary>
            <param name="minHeight">
            The new minimum height value. Scale, offset and thickness are applied after
            setting the new value.
            </param>
            <param name="maxHeight">
            The new maximum height value. Scale, offset and thickness are applied after
            setting the new value.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.HeightfieldData.Dispose">
            <summary>
            Destroys the heightfield data.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.HeightfieldGetHeight">
            <summary>
            Represents the method that determines the height of a given element
            in the field.
            </summary>
            <param name="x">The x-coordinate of the field element.</param>
            <param name="z">The z-coordinate of the field element.</param>
            <returns>The y-coordinate (height) of the field element.</returns>
        </member>
        <member name="T:Ode.Net.Collision.Plane">
            <summary>
            Represents an infinite (non-placeable) plane geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Plane"/> class with the
            specified plane parameters.
            </summary>
            <param name="a">The first parameter of the plane equation.</param>
            <param name="b">The second parameter of the plane equation.</param>
            <param name="c">The third parameter of the plane equation.</param>
            <param name="d">The fourth parameter of the plane equation.</param>
        </member>
        <member name="M:Ode.Net.Collision.Plane.#ctor(Ode.Net.Collision.Space,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Plane"/> class on the
            given space and with the specified plane parameters.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="a">The first parameter of the plane equation.</param>
            <param name="b">The second parameter of the plane equation.</param>
            <param name="c">The third parameter of the plane equation.</param>
            <param name="d">The fourth parameter of the plane equation.</param>
        </member>
        <member name="M:Ode.Net.Collision.Plane.PointDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the depth of the specified point within the plane.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <param name="z">The z-coordinate of the point to test.</param>
            <returns>
            The depth of the point. Points inside the plane will have a
            positive depth, points outside it will have a negative depth,
            and points on the surface will have a depth of zero.
            </returns>
        </member>
        <member name="P:Ode.Net.Collision.Plane.Parameters">
            <summary>
            Gets or sets the parameters defining the plane equation.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.QuadTreeSpace">
            <summary>
            Represents a quadtree collision space.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.QuadTreeSpace.#ctor(Ode.Net.Vector3,Ode.Net.Vector3,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.QuadTreeSpace"/> class.
            </summary>
            <param name="center">The center of the root block.</param>
            <param name="extents">The size of the root block.</param>
            <param name="depth">
            The depth of the tree. The number of blocks that are created is 4^depth.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.QuadTreeSpace.#ctor(Ode.Net.Collision.Space,Ode.Net.Vector3,Ode.Net.Vector3,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.QuadTreeSpace"/> class
            inside the specified space.
            </summary>
            <param name="space">The space which will contain the new quadtree space.</param>
            <param name="center">The center of the root block.</param>
            <param name="extents">The size of the root block.</param>
            <param name="depth">
            The depth of the tree. The number of blocks that are created is 4^depth.
            </param>
        </member>
        <member name="T:Ode.Net.Collision.AxisOrder">
            <summary>
            Specifies the possible spatial axes order for the
            sweep-and-prune collision space.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.AxisOrder.Xyz">
            <summary>
            Specifies the XYZ order.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.AxisOrder.Xzy">
            <summary>
            Specifies the XZY order.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.AxisOrder.Yxz">
            <summary>
            Specifies the YXZ order.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.AxisOrder.Yzx">
            <summary>
            Specifies the YZX order.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.AxisOrder.Zxy">
            <summary>
            Specifies the ZXY order.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.AxisOrder.Zyx">
            <summary>
            Specifies the ZYX order.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.Ray">
            <summary>
            Represents a ray geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Ray.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Ray"/> class with the
            specified length.
            </summary>
            <param name="length">The length of the ray.</param>
        </member>
        <member name="M:Ode.Net.Collision.Ray.#ctor(Ode.Net.Collision.Space,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Ray"/> class on the
            given space and with the specified length.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="length">The length of the ray.</param>
        </member>
        <member name="P:Ode.Net.Collision.Ray.Length">
            <summary>
            Gets or sets the length of the ray.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Ray.Direction">
            <summary>
            Gets or sets the direction vector of the ray.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Ray.FirstContact">
            <summary>
            Gets or sets a value indicating whether collision returns the first
            contact detected between the ray and a trimesh.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Ray.BackfaceCull">
            <summary>
            Gets or sets a value indicating whether collision returns a contact
            between the ray and a backfacing triangle of a trimesh.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.Ray.ClosestHit">
            <summary>
            Gets or sets a value indicating whether collision returns the closest contact
            to the ray position.
            </summary>
            <remarks>
            This parameter is ignored if <see cref="P:Ode.Net.Collision.Ray.FirstContact"/> is set to <b>true</b>.
            </remarks>
        </member>
        <member name="T:Ode.Net.Collision.SimpleSpace">
            <summary>
            Represents a simple collision space.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.SimpleSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.SimpleSpace"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.SimpleSpace.#ctor(Ode.Net.Collision.Space)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.SimpleSpace"/> class
            inside the specified space.
            </summary>
            <param name="space">The space which will contain the new simple space.</param>
        </member>
        <member name="T:Ode.Net.Collision.NearCallback">
            <summary>
            Represents the method that handles pairs of potentially intersecting geoms.
            </summary>
            <param name="geom1">The first geom that potentially intersects.</param>
            <param name="geom2">The second geom that potentially intersects.</param>
        </member>
        <member name="T:Ode.Net.Collision.Sphere">
            <summary>
            Represents a sphere geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.Sphere.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Sphere"/> class with the
            specified radius.
            </summary>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:Ode.Net.Collision.Sphere.#ctor(Ode.Net.Collision.Space,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.Sphere"/> class on the
            given space and with the specified radius.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:Ode.Net.Collision.Sphere.PointDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the depth of the specified point within the sphere.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <param name="z">The z-coordinate of the point to test.</param>
            <returns>
            The depth of the point. Points inside the sphere will have a
            positive depth, points outside it will have a negative depth,
            and points on the surface will have a depth of zero.
            </returns>
        </member>
        <member name="P:Ode.Net.Collision.Sphere.Radius">
            <summary>
            Gets or sets the radius of the sphere.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.SurfaceParameters">
            <summary>
            Represents the properties of colliding surfaces.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Mode">
            <summary>
            Specifies the contact modes for the surface.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Mu">
            <summary>
            Specifies the Coulomb friction coefficient of the surface.
            </summary>
            <remarks>
            This must be in the range 0 to Infinity. 0 results in a frictionless
            contact, and dInfinity results in a contact that never slips. Note
            that frictionless contacts are less time consuming to compute than
            ones with friction, and infinite friction contacts can be cheaper
            than contacts with finite friction. This must always be set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Mu2">
            <summary>
            Specifies the optional Coulomb friction coefficient for friction direction 2.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Rho">
            <summary>
            Specifies the rolling friction coefficient around direction 1.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Rho2">
            <summary>
            Specifies the rolling friction coefficient around direction 2.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.RhoN">
            <summary>
            Specifies the rolling friction coefficient around the normal direction.
            </summary>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Bounce">
            <summary>
            Specifies the restitution parameter for the surface. 0 means the surface is
            not bouncy at all, 1 is maximum bouncyness.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.BounceVelocity">
            <summary>
            Specifies the minimum incoming velocity necessary for bounce.
            </summary>
            <remarks>
            Incoming velocities below this will effectively have a bounce
            parameter of 0. This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.SoftErp">
            <summary>
            Specifies the contact normal ``softness'' parameter.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.SoftCfm">
            <summary>
            Specifies the contact normal ``softness'' parameter.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Motion1">
            <summary>
            Specifies the surface velocity in friction direction 1.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Motion2">
            <summary>
            Specifies the surface velocity in friction direction 2.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.MotionN">
            <summary>
            Specifies the surface velocity in the direction of the contact normal.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Slip1">
            <summary>
            Specifies the coefficient of force-dependent-slip (FDS) for friction direction 1.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="F:Ode.Net.Collision.SurfaceParameters.Slip2">
            <summary>
            Specifies the coefficient of force-dependent-slip (FDS) for friction direction 2.
            </summary>
            <remarks>
            This is only used if the corresponding mode is set.
            </remarks>
        </member>
        <member name="M:Ode.Net.Collision.SurfaceParameters.Equals(Ode.Net.Collision.SurfaceParameters)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Collision.SurfaceParameters"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Collision.SurfaceParameters"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same parameters
            as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.SurfaceParameters.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Collision.SurfaceParameters"/> and
            has the same parameters as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.SurfaceParameters.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Collision.SurfaceParameters.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the surface parameters of this instance.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.SurfaceParameters.op_Equality(Ode.Net.Collision.SurfaceParameters,Ode.Net.Collision.SurfaceParameters)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Collision.SurfaceParameters"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Collision.SurfaceParameters"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Collision.SurfaceParameters"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            equal surface parameters; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.SurfaceParameters.op_Inequality(Ode.Net.Collision.SurfaceParameters,Ode.Net.Collision.SurfaceParameters)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Collision.SurfaceParameters"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Collision.SurfaceParameters"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Collision.SurfaceParameters"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ
            in their surface parameters; <b>false</b> if <paramref name="left"/>
            and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Ode.Net.Collision.SweepAndPruneSpace">
            <summary>
            Represents a sweep-and-prune collision space.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.SweepAndPruneSpace.#ctor(Ode.Net.Collision.AxisOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.SweepAndPruneSpace"/> class.
            </summary>
            <param name="axisOrder">The spatial axes ordering for the sweep-and-prune space.</param>
        </member>
        <member name="M:Ode.Net.Collision.SweepAndPruneSpace.#ctor(Ode.Net.Collision.Space,Ode.Net.Collision.AxisOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.SweepAndPruneSpace"/> class
            inside the specified space.
            </summary>
            <param name="space">The space which will contain the new sweep-and-prune space.</param>
            <param name="axisOrder">The spatial axes ordering for the sweep-and-prune space.</param>
        </member>
        <member name="T:Ode.Net.Collision.TriMesh">
            <summary>
            Represents a triangle mesh geom.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.#ctor(Ode.Net.Collision.TriMeshData)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.TriMesh"/> class with the
            specified data.
            </summary>
            <param name="data">The triangle mesh data object.</param>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.#ctor(Ode.Net.Collision.Space,Ode.Net.Collision.TriMeshData)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.TriMesh"/> class on the
            given space and with the specified data.
            </summary>
            <param name="space">The space that is to contain the geom.</param>
            <param name="data">The triangle mesh data object.</param>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.EnableTemporalCoherence(Ode.Net.Collision.GeomClass,System.Boolean)">
            <summary>
            Enables or disables temporal coherence during triangle mesh collisions
            with the specified geometry class.
            </summary>
            <param name="geomClass">The geometry class for which to set temporal coherence.</param>
            <param name="value">
            <b>true</b> if temporal coherence should be enabled for the specified
            geometry class; otherwise, <b>false</b>.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.IsTemporalCoherenceEnabled(Ode.Net.Collision.GeomClass)">
            <summary>
            Checks whether temporal coherence is enabled during triangle mesh
            collisions with the specified geometry class.
            </summary>
            <param name="geomClass">The geometry class to check.</param>
            <returns>
            <b>true</b> if temporal coherence is enabled for the specified
            geometry class; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.ClearTemporalCoherenceCache">
            <summary>
            Clears the internal temporal coherence caches.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.GetTriangle(System.Int32,Ode.Net.Vector3@,Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Gets the vertices of a triangle in world space.
            </summary>
            <param name="index">The index of the triangle.</param>
            <param name="v0">The first vertex of the triangle, in world space.</param>
            <param name="v1">The second vertex of the triangle, in world space.</param>
            <param name="v2">The third vertex of the triangle, in world space.</param>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.GetPoint(System.Int32,System.Double,System.Double,Ode.Net.Vector3@)">
            <summary>
            Gets a position on the surface of a triangle, in world space.
            </summary>
            <param name="index">The index of the triangle for which to compute the position.</param>
            <param name="u">The u component in barycentric coordinates.</param>
            <param name="v">The v component in barycentric coordinates.</param>
            <param name="result">
            The position on the surface of the triangle, in world space.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.TriMesh.GetPoint(System.Int32,System.Double,System.Double)">
            <summary>
            Gets a position on the surface of a triangle, in world space.
            </summary>
            <param name="index">The index of the triangle for which to compute the position.</param>
            <param name="u">The u component in barycentric coordinates.</param>
            <param name="v">The v component in barycentric coordinates.</param>
            <returns>The position on the surface of the triangle, in world space.</returns>
        </member>
        <member name="P:Ode.Net.Collision.TriMesh.Data">
            <summary>
            Gets or sets the triangle mesh data object.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.TriMesh.TriangleCount">
            <summary>
            Gets the number of triangles in the triangle mesh.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.TriMesh.Callback">
            <summary>
            Gets or sets the optional per triangle callback that determines
            whether a collision with a particular triangle is wanted.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.TriMesh.ArrayCallback">
            <summary>
            Gets or sets the optional per geom callback that will receive the
            list of all intersecting triangles.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.TriMesh.RayCallback">
            <summary>
            Gets or sets the optional ray callback that determines whether a ray
            collides with a triangle based on the barycentric coordinates of
            the intersection.
            </summary>
        </member>
        <member name="P:Ode.Net.Collision.TriMesh.TriangleMergeCallback">
            <summary>
            Gets or sets the optional triangle merge callback that allows specifying
            triangle indices resulting from merging two other triangle contacts.
            </summary>
        </member>
        <member name="T:Ode.Net.Collision.TriangleCallback">
            <summary>
            Represents the method that is called per triangle collision to
            determine whether a collision with a particular geom is wanted.
            </summary>
            <param name="triMesh">The triangle mesh containing the colliding triangle.</param>
            <param name="geom">The geom colliding with the triangle.</param>
            <param name="triangleIndex">The index of the colliding triangle.</param>
            <returns>
            <b>true</b> if the collision should generate contacts; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Ode.Net.Collision.TriangleArrayCallback">
            <summary>
            Represents the method that is called per geom collision to
            handle the list of all intersecting triangles.
            </summary>
            <param name="triMesh">The triangle mesh containing the colliding triangles.</param>
            <param name="geom">The geom colliding with the triangles.</param>
            <param name="triangleIndices">The array of indices of the colliding triangles.</param>
        </member>
        <member name="T:Ode.Net.Collision.TriangleRayCallback">
            <summary>
            Represents the method that is called per ray collision to
            determine whether the ray collides with a triangle in barycentric
            coordinates.
            </summary>
            <param name="triMesh">The triangle mesh containing the colliding triangle.</param>
            <param name="ray">The ray colliding with the triangle.</param>
            <param name="triangleIndex">The index of the colliding triangle.</param>
            <param name="u">The u component in barycentric coordinates of the intersection.</param>
            <param name="v">The v component in barycentric coordinates of the intersection.</param>
            <returns>
            <b>true</b> if the collision should generate contacts; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Ode.Net.Collision.TriangleTriangleMergeCallback">
            <summary>
            Represents the method that is called to allow specifying the triangle
            indices resulting from merging two other triangle contacts.
            </summary>
            <param name="triMesh">The triangle mesh containing the merged triangles.</param>
            <param name="firstTriangleIndex">The index of the first merged triangle.</param>
            <param name="secondTriangleIndex">The index of the second merged triangle.</param>
            <returns>The index of the merged triangle.</returns>
        </member>
        <member name="T:Ode.Net.Joints.AngularMotor">
            <summary>
            Represents an angular motor joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Joint">
            <summary>
            Represents a joint, or constraint, enforced between two bodies.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Joint.Attach(Ode.Net.Body,Ode.Net.Body)">
            <summary>
            Attaches the joint to some new bodies. Setting both bodies to <b>null</b>
            makes the joint have no effect in the simulation.
            </summary>
            <param name="body1">
            The first body. A <b>null</b> value refers to the static environment.
            </param>
            <param name="body2">
            The second body. A <b>null</b> value refers to the static environment.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Joint.GetBody(System.Int32)">
            <summary>
            Gets the bodies that this joint connects.
            </summary>
            <param name="index">The index of the body to retrieve.</param>
            <returns>
            The attached joint body with the specified index. A <b>null</b> value
            refers to the static environment.
            </returns>
        </member>
        <member name="M:Ode.Net.Joints.Joint.Dispose">
            <summary>
            Destroys the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Joint.NumBodies">
            <summary>
            Gets the number of bodies attached to the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Joint.Enabled">
            <summary>
            Gets or sets a value indicating whether the joint is enabled.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Joint.Tag">
            <summary>
            Gets or sets the object that contains data about the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Joint.Type">
            <summary>
            Gets the type of the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Joint.Feedback">
            <summary>
            Gets or sets the object that is to receive the joint feedback.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.AngularMotor.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.AngularMotor"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.AngularMotor.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.AngularMotor"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.AngularMotor.AddTorques(System.Double,System.Double,System.Double)">
            <summary>
            Applies torque about all angular motor axes.
            </summary>
            <param name="torque1">
            The magnitude of the torque to be applied about the first angular motor axis.
            </param>
            <param name="torque2">
            The magnitude of the torque to be applied about the second angular motor axis.
            </param>
            <param name="torque3">
            The magnitude of the torque to be applied about the third angular motor axis.
            </param>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.NumAxes">
            <summary>
            Gets or sets the number of angular axes that will be controlled by
            the angular motor.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Axis1">
            <summary>
            Gets or sets the first angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Axis2">
            <summary>
            Gets or sets the second angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Axis3">
            <summary>
            Gets or sets the third angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Axis1RelativeOrientation">
            <summary>
            Gets or sets the relative orientation mode of the first angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Axis2RelativeOrientation">
            <summary>
            Gets or sets the relative orientation mode of the second angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Axis3RelativeOrientation">
            <summary>
            Gets or sets the relative orientation mode of the third angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Angle1">
            <summary>
            Gets or sets the current angle for the first angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Angle2">
            <summary>
            Gets or sets the current angle for the second angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Angle3">
            <summary>
            Gets or sets the current angle for the third angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Angle1Rate">
            <summary>
            Gets the first angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Angle2Rate">
            <summary>
            Gets the second angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Angle3Rate">
            <summary>
            Gets the third angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.Mode">
            <summary>
            Gets or sets the angular motor mode.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.LimitMotor1">
            <summary>
            Gets the limit and motor parameters of the first angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.LimitMotor2">
            <summary>
            Gets the limit and motor parameters of the second angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.AngularMotor.LimitMotor3">
            <summary>
            Gets the limit and motor parameters of the third angular motor axis.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.JointLimitMotor">
            <summary>
            Represents the limit and motor parameters of a joint axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.LowStop">
            <summary>
            Gets or sets the low stop angle or position.
            </summary>
            <remarks>
            Setting this to -Infinity (the default value) turns off the low stop.
            For rotational joints, this stop must be greater than -pi to be effective.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.HighStop">
            <summary>
            Gets or sets the high stop angle or position.
            </summary>
            <remarks>
            Setting this to dInfinity (the default value) turns off the high stop.
            For rotational joints, this stop must be less than pi to be effective.
            If the high stop is less than the low stop then both stops will be ineffective.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.Velocity">
            <summary>
            Gets or sets the desired motor velocity (this will be an angular or linear velocity).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.MaxForce">
            <summary>
            Gets or sets the maximum force or torque that the motor will use to achieve the
            desired velocity.
            </summary>
            <remarks>
            This must always be greater than or equal to zero. Setting this to
            zero (the default value) turns off the motor.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.FudgeFactor">
            <summary>
            Gets or sets a scale factor to prevent excess force being applied at the stops.
            </summary>
            <remarks>
            It should have a value between zero and one (the default value).
            If the jumping motion is too visible in a joint, the value can be
            reduced. Making this value too small can prevent the motor from
            being able to move the joint away from a stop.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.Bounce">
            <summary>
            Gets or sets a value controlling the restitution strength at the stops.
            </summary>
            <remarks>
            This is a restitution parameter in the range 0..1. 0 means the
            stops are not bouncy at all, 1 means maximum bounciness.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.Cfm">
            <summary>
            Gets or sets the constraint force mixing value used when not at a stop.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.StopErp">
            <summary>
            Gets or sets the error reduction parameter used at the stops.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointLimitMotor.StopCfm">
            <summary>
            Gets or sets the constraint force mixing value used at the stops.
            </summary>
            <remarks>
            Together with the ERP value this can be used to get spongy or soft stops.
            Note that this is intended for unpowered joints, it does not really work
            as expected when a powered joint reaches its limit.
            </remarks>
        </member>
        <member name="T:Ode.Net.Joints.AngularMotorMode">
            <summary>
            Specifies how the angular motor axes and joint angle settings
            are controlled.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.AngularMotorMode.User">
            <summary>
            Specifies that the angular motor axes and joint angle settings are entirely
            controlled by the user. This is the default mode.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.AngularMotorMode.Euler">
            <summary>
            Specifies that both joint euler angles and axis 1 are automatically computed.
            The angular motor axes must be set correctly when in this mode.
            </summary>
            <remarks>
            When in euler angle mode, the joint axes must be set as follows:
            <list type="bullet">
            <item>
            <description>
            Only axes 0 and 2 need to be set. Axis 1 will be determined automatically
            at each time step.
            </description>
            </item>
            <item>
            <description>Axes 0 and 2 must be perpendicular to each other.</description>
            </item>
            <item>
            <description>
            Axis 0 must be anchored to the first body, axis 2 must be anchored
            to the second body.
            </description>
            </item>
            </list>
            
            When this mode is initially set the current relative orientations
            of the bodies will correspond to all euler angles at zero.
            </remarks>
        </member>
        <member name="T:Ode.Net.Joints.Ball">
            <summary>
            Represents a ball and socket joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Ball.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Ball"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Ball.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Ball"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="P:Ode.Net.Joints.Ball.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Ball.Anchor2">
            <summary>
            Gets or sets the anchor point on the second body, in world coordinates. If the
            joint is perfectly satisfied, this will be the same value as <see cref="P:Ode.Net.Joints.Ball.Anchor"/>.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Ball.Cfm">
            <summary>
            Gets or sets the constraint mixing factor used by the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Ball.Erp">
            <summary>
            Gets or sets the error reduction parameter used by the joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Contact">
            <summary>
            Represents a joint used to prevent two bodies from inter-penetrating
            at a contact point.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Contact.#ctor(Ode.Net.World,Ode.Net.Collision.ContactInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Contact"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="contact">
            A structure containing information about the contact point and
            colliding surfaces.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Contact.#ctor(Ode.Net.World,Ode.Net.Collision.ContactInfo,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Contact"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="contact">
            A structure containing information about the contact point and
            colliding surfaces.
            </param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="T:Ode.Net.Joints.DoubleBall">
            <summary>
            Represents a double ball joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.DoubleBall.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.DoubleBall"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.DoubleBall.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.DoubleBall"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="P:Ode.Net.Joints.DoubleBall.Anchor1">
            <summary>
            Gets or sets the first anchor for the double ball joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleBall.Anchor2">
            <summary>
            Gets or sets the second anchor for the double ball joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleBall.Distance">
            <summary>
            Gets the set distance from the double ball joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleBall.Cfm">
            <summary>
            Gets or sets the constraint mixing factor used by the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleBall.Erp">
            <summary>
            Gets or sets the error reduction parameter used by the joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.DoubleHinge">
            <summary>
            Represents a double hinge joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.DoubleHinge.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.DoubleHinge"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.DoubleHinge.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.DoubleHinge"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="P:Ode.Net.Joints.DoubleHinge.Anchor1">
            <summary>
            Gets or sets the first anchor for the double hinge joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleHinge.Anchor2">
            <summary>
            Gets or sets the second anchor for the double hinge joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleHinge.Axis">
            <summary>
            Gets or sets the axis for the double hinge joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleHinge.Distance">
            <summary>
            Gets the set distance from the double hinge joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleHinge.Cfm">
            <summary>
            Gets or sets the constraint mixing factor used by the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.DoubleHinge.Erp">
            <summary>
            Gets or sets the error reduction parameter used by the joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Fixed">
            <summary>
            Represents a joint used to maintain a fixed relative position and orientation
            between two bodies, or between a body and the static environment.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Fixed.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Fixed"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Fixed.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Fixed"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Fixed.Fix">
            <summary>
            Remembers the current desired relative offset and desired relative rotation
            between attached bodies.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Fixed.Cfm">
            <summary>
            Gets or sets the constraint mixing factor used by the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Fixed.Erp">
            <summary>
            Gets or sets the error reduction parameter used by the joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Hinge">
            <summary>
            Represents a hinge joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Hinge.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Hinge"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Hinge.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Hinge"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Hinge.SetAnchorDelta(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Sets the hinge anchor point with a relative displacement vector.
            </summary>
            <param name="anchor">The hinge anchor point, in world frame coordinates.</param>
            <param name="displacement">
            The relative displacement vector between the passive body and the anchor.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Hinge.SetAxisOffset(Ode.Net.Vector3,System.Double)">
            <summary>
            Sets the hinge axis as if the two bodies were already apart by the
            specified angle.
            </summary>
            <param name="axis">The hinge axis, in world frame coordinates.</param>
            <param name="angle">
            The angle for the offset of the relative orientation between the two bodies.
            The rotation is specified about the new hinge axis.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Hinge.AddTorque(System.Double)">
            <summary>
            Applies the specified torque about the hinge axis.
            </summary>
            <param name="torque">The magnitude of the applied torque.</param>
        </member>
        <member name="P:Ode.Net.Joints.Hinge.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge.Anchor2">
            <summary>
            Gets the anchor point on the second body, in world coordinates. If the
            joint is perfectly satisfied, this will be the same value as <see cref="P:Ode.Net.Joints.Hinge.Anchor"/>.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge.Axis">
            <summary>
            Gets or sets the hinge rotation axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge.Angle">
            <summary>
            Gets the angle measured between the two bodies with respect
            to the hinge axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge.AngleRate">
            <summary>
            Gets the hinge angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge.LimitMotor">
            <summary>
            Gets the limit and motor parameters of the hinge.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Hinge2">
            <summary>
            Represents two hinge joints connected in series, with different hinge axes.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Hinge2.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Hinge2"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Hinge2.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Hinge2"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Hinge2.AddTorques(System.Double,System.Double)">
            <summary>
            Applies torque about both hinge axes.
            </summary>
            <param name="torque1">
            The magnitude of the torque to be applied about the first hinge axis.
            </param>
            <param name="torque2">
            The magnitude of the torque to be applied about the second hinge axis.
            </param>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Anchor2">
            <summary>
            Gets the anchor point on the second body, in world coordinates. If the
            joint is perfectly satisfied, this will be the same value as <see cref="P:Ode.Net.Joints.Hinge2.Anchor"/>.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Axis1">
            <summary>
            Gets or sets the axis for the first hinge, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Axis2">
            <summary>
            Gets or sets the axis for the second hinge, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Angle1">
            <summary>
            Gets the angle measured between the two bodies with respect
            to the first hinge axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Angle1Rate">
            <summary>
            Gets the first hinge angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.Angle2Rate">
            <summary>
            Gets the second hinge angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.LimitMotor1">
            <summary>
            Gets the limit and motor parameters of the first hinge.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.LimitMotor2">
            <summary>
            Gets the limit and motor parameters of the second hinge.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.SuspensionErp">
            <summary>
            Gets or sets the suspension error reduction parameter.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Hinge2.SuspensionCfm">
            <summary>
            Gets or sets the suspension constraint force mixing value.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.JointFeedback">
            <summary>
            Represents a data object that stores the feedback forces applied by
            a joint on its connected bodies.
            </summary>
            <remarks>
            All memory management of joint feedbacks is, for now, left
            entirely up to the user. Be sure not to use additional references
            to the same JointFeedback structure after calling Dispose().
            The user is also expected to manage the reference which is registered
            with a given Joint. If you dispose a JointFeedback without first
            setting the reference on the Joint to null, you risk a memory
            violation exception.
            This behaviour may be refined in the future to adhere to managed
            code memory management design patterns. For now it is left as is from
            the ODE lower-level library code.
            </remarks>
        </member>
        <member name="M:Ode.Net.Joints.JointFeedback.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.JointFeedback"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.JointFeedback.Dispose">
            <summary>
            Destroys the feedback data object.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointFeedback.ForceOnBody1">
            <summary>
            Gets the force that the joint applies to the first body.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointFeedback.TorqueOnBody1">
            <summary>
            Gets the torque that the joint applies to the first body.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointFeedback.ForceOnBody2">
            <summary>
            Gets the force that the joint applies to the second body.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.JointFeedback.TorqueOnBody2">
            <summary>
            Gets the torque that the joint applies to the second body.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.JointGroup">
            <summary>
            Represents a collection of joints.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.JointGroup.Clear">
            <summary>
            Removes all joints from the <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.JointGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <returns>
            An enumerator for the <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </returns>
        </member>
        <member name="T:Ode.Net.Joints.JointType">
            <summary>
            Specifies the type of a joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.None">
            <summary>
            Undefined joint type.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Ball">
            <summary>
            A ball and socket joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Hinge">
            <summary>
            A hinge joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Slider">
            <summary>
            A slider joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Contact">
            <summary>
            A contact joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Universal">
            <summary>
            A universal joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Hinge2">
            <summary>
            A hinge-2 joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Fixed">
            <summary>
            A fixed joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Null">
            <summary>
            A null joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.AngularMotor">
            <summary>
            An angular motor joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.LinearMotor">
            <summary>
            A linear motor joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Plane2D">
            <summary>
            A plane2D constraint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.PrismaticRotoide">
            <summary>
            A prismatic and rotoide joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.PrismaticUniversal">
            <summary>
            A prismatic and universal joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Piston">
            <summary>
            A piston joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.DoubleBall">
            <summary>
            A double ball joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.DoubleHinge">
            <summary>
            A double hinge joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.JointType.Transmission">
            <summary>
            A transmission joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.LinearMotor">
            <summary>
            Represents a linear motor joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.LinearMotor.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.LinearMotor"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.LinearMotor.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.LinearMotor"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.LinearMotor.SetAxis(System.Int32,Ode.Net.Joints.RelativeOrientation,Ode.Net.Vector3)">
            <summary>
            Sets the specified linear motor axis using a specific relative orientation mode.
            </summary>
            <param name="index">The index of the linear motor axis to set.</param>
            <param name="relativeMode">The relative orientation mode of the specified axis.</param>
            <param name="axis">The linear motor axis.</param>
        </member>
        <member name="M:Ode.Net.Joints.LinearMotor.SetAxis(System.Int32,Ode.Net.Joints.RelativeOrientation,System.Double,System.Double,System.Double)">
            <summary>
            Sets the specified linear motor axis using a specific relative orientation mode.
            </summary>
            <param name="index">The index of the linear motor axis to set.</param>
            <param name="relativeMode">The relative orientation mode of the specified axis.</param>
            <param name="ax">The x-component of the linear motor axis.</param>
            <param name="ay">The y-component of the linear motor axis.</param>
            <param name="az">The z-component of the linear motor axis.</param>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.NumAxes">
            <summary>
            Gets or sets the number of axes that will be controlled by the linear motor.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.Axis1">
            <summary>
            Gets or sets the first linear motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.Axis2">
            <summary>
            Gets or sets the second linear motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.Axis3">
            <summary>
            Gets or sets the third linear motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.LimitMotor1">
            <summary>
            Gets the limit and motor parameters of the first angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.LimitMotor2">
            <summary>
            Gets the limit and motor parameters of the second angular motor axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.LinearMotor.LimitMotor3">
            <summary>
            Gets the limit and motor parameters of the third angular motor axis.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Null">
            <summary>
            Represents a null (logical) joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Null.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Null"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Null.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Null"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="T:Ode.Net.Joints.Piston">
            <summary>
            Represents a piston joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Piston.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Piston"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Piston.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Piston"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Piston.SetAnchorOffset(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Sets the piston anchor and the relative position of each body as if the
            two bodies were already separated by the specified offset.
            </summary>
            <param name="anchor">The joint anchor point, in world coordinates.</param>
            <param name="offset">
            The offset to be subtracted from the anchor point, as if the anchor was set
            when the first body was at its current position minus the offset.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Piston.AddForce(System.Double)">
            <summary>
            Applies the specified force in the piston's direction.
            </summary>
            <param name="force">The magnitude of the applied force.</param>
        </member>
        <member name="P:Ode.Net.Joints.Piston.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.Anchor2">
            <summary>
            Gets the anchor point on the second body, in world coordinates. If the
            joint is perfectly satisfied, this will be the same value as <see cref="P:Ode.Net.Joints.Piston.Anchor"/>.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.Axis">
            <summary>
            Gets or sets the piston axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.Position">
            <summary>
            Gets the piston linear position (i.e. the piston's extension).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.PositionRate">
            <summary>
            Gets the piston linear position time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.Angle">
            <summary>
            Gets the piston angular position (i.e. the twist between the two bodies).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.AngleRate">
            <summary>
            Gets the piston angular position time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.LimitMotorP">
            <summary>
            Gets the limit and motor parameters for the prismatic part of the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Piston.LimitMotorR">
            <summary>
            Gets the limit and motor parameters for the rotoide part of the joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Plane2D">
            <summary>
            Represents a joint used to constrain a body to a bidimensional plane.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Plane2D.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Plane2D"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Plane2D.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Plane2D"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Plane2D.Attach(Ode.Net.Body)">
            <summary>
            Attaches the joint to the specified body.
            </summary>
            <param name="body">The body to constrain to the bidimensional plane.</param>
        </member>
        <member name="T:Ode.Net.Joints.PrismaticRotoide">
            <summary>
            Represents a prismatic and rotoide joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticRotoide.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.PrismaticRotoide"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticRotoide.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.PrismaticRotoide"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticRotoide.AddTorque(System.Double)">
            <summary>
            Applies torque about the rotoide axis of the PR joint.
            </summary>
            <param name="torque">
            The magnitude of the torque to apply in the direction of the rotoide axis
            to the first body and in the opposite direction to the second body.
            </param>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.Axis1">
            <summary>
            Gets or sets the first PR axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.Axis2">
            <summary>
            Gets or sets the second PR axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.Position">
            <summary>
            Gets the PR linear position (i.e. the prismatic's extension).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.PositionRate">
            <summary>
            Gets the PR linear position time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.Angle">
            <summary>
            Gets the PR angular position (i.e. the twist between the two bodies).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.AngleRate">
            <summary>
            Gets the PR angular position time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.LimitMotor1">
            <summary>
            Gets the limit and motor parameters of the first PR axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticRotoide.LimitMotor2">
            <summary>
            Gets the limit and motor parameters of the second PR axis.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.PrismaticUniversal">
            <summary>
            Represents a prismatic and universal joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticUniversal.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.PrismaticUniversal"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticUniversal.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.PrismaticUniversal"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticUniversal.GetAngles(System.Double@,System.Double@)">
            <summary>
            Gets both universal joint angles at the same time.
            </summary>
            <param name="angle1">
            When the method returns, contains the angle between the first body and the first axis.
            </param>
            <param name="angle2">
            When the method returns, contains the angle between the second body and the second axis.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticUniversal.SetAnchorOffset(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Sets the PU anchor and the relative position of each body as if the
            two bodies were already separated by the specified offset.
            </summary>
            <param name="anchor">The joint anchor point, in world coordinates.</param>
            <param name="offset">
            The offset to be subtracted from the anchor point, as if the anchor was set
            when the first body was at its current position minus the offset.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.PrismaticUniversal.AddTorque(System.Double)">
            <summary>
            Applies torque about the rotoide axis of the PU joint.
            </summary>
            <param name="torque">
            The magnitude of the torque to apply in the direction of the rotoide axis
            to the first body and in the opposite direction to the second body.
            </param>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Axis1">
            <summary>
            Gets or sets the first, universal PU axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Axis2">
            <summary>
            Gets or sets the second, universal PU axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Axis3">
            <summary>
            Gets or sets the third, prismatic PU axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Position">
            <summary>
            Gets the PU linear position (i.e. the prismatic's extension).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.PositionRate">
            <summary>
            Gets the PU linear position time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Angle1">
            <summary>
            Gets the angle measured between the first body and the first universal axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Angle1Rate">
            <summary>
            Gets the first angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Angle2">
            <summary>
            Gets the angle measured between the second body and the second universal axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.Angle2Rate">
            <summary>
            Gets the second angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.LimitMotor1">
            <summary>
            Gets the limit and motor parameters of the first PU axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.LimitMotor2">
            <summary>
            Gets the limit and motor parameters of the second PU axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.PrismaticUniversal.LimitMotor3">
            <summary>
            Gets the limit and motor parameters of the prismatic PU axis.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Slider">
            <summary>
            Represents a slider joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Slider.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Slider"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Slider.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Slider"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Slider.SetAxisDelta(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Sets the slider axis with a relative displacement vector.
            </summary>
            <param name="axis">The slider axis, in world frame coordinates.</param>
            <param name="displacement">The relative displacement vector of the axis.</param>
        </member>
        <member name="M:Ode.Net.Joints.Slider.AddForce(System.Double)">
            <summary>
            Applies the specified force in the slider's direction.
            </summary>
            <param name="force">The magnitude of the applied force.</param>
        </member>
        <member name="P:Ode.Net.Joints.Slider.Axis">
            <summary>
            Gets or sets the slider axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Slider.Position">
            <summary>
            Gets the slider linear position (i.e. the slider's extension).
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Slider.PositionRate">
            <summary>
            Gets the slider linear position time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Slider.LimitMotor">
            <summary>
            Gets the limit and motor parameters of the slider.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Transmission">
            <summary>
            Represents a transmission joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Transmission.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Transmission"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Transmission.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Transmission"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Anchor1">
            <summary>
            Gets or sets the first transmission anchor. This is the point of attachment
            of the wheel on the first body, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Anchor2">
            <summary>
            Gets or sets the second transmission anchor. This is the point of attachment
            of the wheel on the second body, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Axis">
            <summary>
            Gets or sets the common axis for both wheels of the transmission joint,
            in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Axis1">
            <summary>
            Gets or sets the first axis for the transmission joint, in world coordinates.
            This is the axis around which the first body is allowed to revolve and is
            attached to.
            </summary>
            <remarks>
            This axis can only be set explicitly in intersecting-axes mode. For the
            parallel-axes and chain modes which share one common axis of revolution for
            both gears, the <see cref="P:Ode.Net.Joints.Transmission.Axis"/> property should be used.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Axis2">
            <summary>
            Gets or sets the second axis for the transmission joint, in world coordinates.
            This is the axis around which the second body is allowed to revolve and is
            attached to.
            </summary>
            <remarks>
            This axis can only be set explicitly in intersecting-axes mode. For the
            parallel-axes and chain modes which share one common axis of revolution for
            both gears, the <see cref="P:Ode.Net.Joints.Transmission.Axis"/> property should be used.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.ContactPoint1">
            <summary>
            Gets the contact point of the first wheel of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.ContactPoint2">
            <summary>
            Gets the contact point of the second wheel of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Angle1">
            <summary>
            Gets the traversed angle for the first wheel of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Angle2">
            <summary>
            Gets the traversed angle for the second wheel of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Mode">
            <summary>
            Gets or sets the working mode of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Ratio">
            <summary>
            Gets or sets the transmission ratio, defined as the ratio of the
            angular speed of the first gear to that of the second gear.
            </summary>
            <remarks>
            This property can only be set explicitly in parallel-axes mode.
            In intersecting-axes mode the ratio is defined implicitly by the
            initial configuration of the wheels and in chain mode it is
            defined implicitly by the wheel radii.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Radius1">
            <summary>
            Gets or sets the radius of the first wheel of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Radius2">
            <summary>
            Gets or sets the radius of the second wheel of the transmission joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Backlash">
            <summary>
            Gets or sets the backlash of the transmission joint, in units of length.
            </summary>
            <remarks>
            Backlash is the clearance in the mesh of the wheels of the transmission
            and is defined as the maximum distance that the geometric contact point
            can travel without any actual contact or transfer of power between the wheels.
            This can be converted in degrees of revolution for each wheel by dividing by
            the wheel's radius. To further illustrate this consider the situation where a
            wheel of radius r_1 is driving another wheel of radius r_2 and there is an
            amount of backlash equal to b in their mesh. If the driving wheel were to
            instantaneously stop there would be no contact and hence the driven wheel
            would continue to turn for another b / r_2 radians until all the backlash
            in the mesh was taken up and contact restored with the relationship of
            driving and driven wheel reversed. The backlash is therefore given in units of
            length.
            </remarks>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Cfm">
            <summary>
            Gets or sets the constraint mixing factor used by the joint.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Transmission.Erp">
            <summary>
            Gets or sets the error reduction parameter used by the joint.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.TransmissionMode">
            <summary>
            Specifies the working mode of the transmission joint.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.TransmissionMode.ParallelAxes">
            <summary>
            Specifies that the transmission joint should simulate a set of
            parallel-axes gears.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.TransmissionMode.IntersectingAxes">
            <summary>
            Specifies that the transmission joint should simulate a set of
            intersecting-axes beveled gears.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.TransmissionMode.ChainDrive">
            <summary>
            Specifies that the transmission joint should simulate a set of
            chain and sprockets.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.RelativeOrientation">
            <summary>
            Specifies the relative orientation mode of an angular or linear motor joint axis.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.RelativeOrientation.Global">
            <summary>
            Specifies that the axis is anchored to the global frame.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.RelativeOrientation.FirstBody">
            <summary>
            Specifies that the axis is anchored to the first body.
            </summary>
        </member>
        <member name="F:Ode.Net.Joints.RelativeOrientation.SecondBody">
            <summary>
            Specifies that the axis is anchored to the second body.
            </summary>
        </member>
        <member name="T:Ode.Net.Joints.Universal">
            <summary>
            Represents a universal joint.
            </summary>
        </member>
        <member name="M:Ode.Net.Joints.Universal.#ctor(Ode.Net.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Universal"/> class.
            </summary>
            <param name="world">The world on which to place the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Universal.#ctor(Ode.Net.World,Ode.Net.Joints.JointGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Joints.Universal"/> class on
            the specified <see cref="T:Ode.Net.Joints.JointGroup"/>.
            </summary>
            <param name="world">The world on which to place the joint.</param>
            <param name="group">The joint group that will contain the joint.</param>
        </member>
        <member name="M:Ode.Net.Joints.Universal.GetAngles(System.Double@,System.Double@)">
            <summary>
            Gets both universal joint angles at the same time.
            </summary>
            <param name="angle1">
            When the method returns, contains the angle between the first body and the first axis.
            </param>
            <param name="angle2">
            When the method returns, contains the angle between the second body and the second axis.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Universal.SetAxis1Offset(Ode.Net.Vector3,System.Double,System.Double)">
            <summary>
            Sets the first universal axis and the relative orientation of each body
            as if the first body was rotated around the first axis by <paramref name="offset1"/>
            and the second body was rotated around the second axis by <paramref name="offset2"/>.
            </summary>
            <param name="axis">The first universal axis, in world frame coordinates.</param>
            <param name="offset1">
            The angle for the offset of the relative orientation between the first body
            and the first axis. The rotation is specified about the new universal axes.
            </param>
            <param name="offset2">
            The angle for the offset of the relative orientation between the second body
            and the second axis. The rotation is specified about the new universal axes.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Universal.SetAxis2Offset(Ode.Net.Vector3,System.Double,System.Double)">
            <summary>
            Sets the second universal axis and the relative orientation of each body
            as if the first body was rotated around the first axis by <paramref name="offset1"/>
            and the second body was rotated around the second axis by <paramref name="offset2"/>.
            </summary>
            <param name="axis">The second universal axis, in world frame coordinates.</param>
            <param name="offset1">
            The angle for the offset of the relative orientation between the first body
            and the first axis. The rotation is specified about the new universal axes.
            </param>
            <param name="offset2">
            The angle for the offset of the relative orientation between the second body
            and the second axis. The rotation is specified about the new universal axes.
            </param>
        </member>
        <member name="M:Ode.Net.Joints.Universal.AddTorques(System.Double,System.Double)">
            <summary>
            Applies torque about both universal joint axes.
            </summary>
            <param name="torque1">
            The magnitude of the torque to be applied about the first universal axis.
            </param>
            <param name="torque2">
            The magnitude of the torque to be applied about the second universal axis.
            </param>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Anchor">
            <summary>
            Gets or sets the joint anchor point, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Anchor2">
            <summary>
            Gets the anchor point on the second body, in world coordinates. If the
            joint is perfectly satisfied, this will be the same value as <see cref="P:Ode.Net.Joints.Universal.Anchor"/>.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Axis1">
            <summary>
            Gets or sets the first universal joint axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Axis2">
            <summary>
            Gets or sets the second universal joint axis, in world coordinates.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Angle1">
            <summary>
            Gets the angle measured between the first body and the first universal axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Angle1Rate">
            <summary>
            Gets the first angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Angle2">
            <summary>
            Gets the angle measured between the second body and the second universal axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.Angle2Rate">
            <summary>
            Gets the second angle time derivative.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.LimitMotor1">
            <summary>
            Gets the limit and motor parameters of the first universal axis.
            </summary>
        </member>
        <member name="P:Ode.Net.Joints.Universal.LimitMotor2">
            <summary>
            Gets the limit and motor parameters of the second universal axis.
            </summary>
        </member>
        <member name="T:Ode.Net.Mass">
            <summary>
            Represents a rigid body mass.
            </summary>
        </member>
        <member name="F:Ode.Net.Mass.TotalMass">
            <summary>
            Specifies the total mass of the rigid body.
            </summary>
        </member>
        <member name="F:Ode.Net.Mass.Center">
            <summary>
            Specifies the position of the center of gravity in body frame.
            </summary>
        </member>
        <member name="F:Ode.Net.Mass.Inertia">
            <summary>
            Specifies the 3x3 inertia tensor in body frame, about the
            point of reference.
            </summary>
        </member>
        <member name="M:Ode.Net.Mass.#ctor(System.Double,Ode.Net.Vector3,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Mass"/> structure with the
            specified parameters.
            </summary>
            <param name="totalMass">The total mass of the rigid body.</param>
            <param name="center">The position of the center of gravity in body frame.</param>
            <param name="i11">The value of the first diagonal element of the inertia matrix.</param>
            <param name="i22">The value of the second diagonal element of the inertia matrix.</param>
            <param name="i33">The value of the third diagonal element of the inertia matrix.</param>
            <param name="i12">The value of the first antidiagonal of the inertia matrix.</param>
            <param name="i13">The value of the second antidiagonal of the inertia matrix.</param>
            <param name="i23">The value of the third antidiagonal of the inertia matrix.</param>
        </member>
        <member name="M:Ode.Net.Mass.Equals(Ode.Net.Mass)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Mass"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Mass"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same mass, center of
            gravity and inertia matrix as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Mass.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Mass"/> and
            has the same mass, center of gravity and inertia matrix as this instance;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Mass.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Mass.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the mass, center of gravity and inertia matrix
            of this instance.
            </returns>
        </member>
        <member name="M:Ode.Net.Mass.Adjust(Ode.Net.Mass,System.Double)">
            <summary>
            Adjusts the mass parameters so that the total mass is now <paramref name="newMass"/>.
            </summary>
            <param name="mass">The mass to adjust.</param>
            <param name="newMass">The new total mass of the rigid body.</param>
            <returns>The adjusted mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.Adjust(Ode.Net.Mass@,System.Double,Ode.Net.Mass@)">
            <summary>
            Adjusts the mass parameters so that the total mass is now <paramref name="newMass"/>.
            </summary>
            <param name="mass">The mass to adjust.</param>
            <param name="newMass">The new total mass of the rigid body.</param>
            <param name="result">The adjusted mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.Translate(Ode.Net.Mass,Ode.Net.Vector3)">
            <summary>
            Adjusts the mass parameters to represent a mass object displaced by the specified
            translation relative to the body frame.
            </summary>
            <param name="mass">The mass to translate.</param>
            <param name="translation">The displacement vector in body frame.</param>
            <returns>The displaced mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.Translate(Ode.Net.Mass@,Ode.Net.Vector3@,Ode.Net.Mass@)">
            <summary>
            Adjusts the mass parameters to represent a mass object displaced by the specified
            translation relative to the body frame.
            </summary>
            <param name="mass">The mass to translate.</param>
            <param name="translation">The displacement vector in body frame.</param>
            <param name="result">The displaced mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.Rotate(Ode.Net.Mass,Ode.Net.Matrix3)">
            <summary>
            Adjusts the mass parameters to represent a mass object rotated by the specified
            rotation relative to the body frame.
            </summary>
            <param name="mass">The mass to rotate.</param>
            <param name="rotation">The rotation matrix in body frame.</param>
            <returns>The rotated mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.Rotate(Ode.Net.Mass@,Ode.Net.Matrix3@,Ode.Net.Mass@)">
            <summary>
            Adjusts the mass parameters to represent a mass object rotated by the specified
            rotation relative to the body frame.
            </summary>
            <param name="mass">The mass to rotate.</param>
            <param name="rotation">The rotation matrix in body frame.</param>
            <param name="result">The rotated mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.Add(Ode.Net.Mass,Ode.Net.Mass)">
            <summary>
            Adds two <see cref="T:Ode.Net.Mass"/> structures and returns the result as a new
            <see cref="T:Ode.Net.Mass"/>.
            </summary>
            <param name="mass1">The first <see cref="T:Ode.Net.Mass"/> to add.</param>
            <param name="mass2">The second <see cref="T:Ode.Net.Mass"/> to add.</param>
            <returns>The sum of the two masses.</returns>
        </member>
        <member name="M:Ode.Net.Mass.Add(Ode.Net.Mass@,Ode.Net.Mass@,Ode.Net.Mass@)">
            <summary>
            Adds two <see cref="T:Ode.Net.Mass"/> structures.
            </summary>
            <param name="mass1">The first <see cref="T:Ode.Net.Mass"/> to add.</param>
            <param name="mass2">The second <see cref="T:Ode.Net.Mass"/> to add.</param>
            <param name="result">The sum of the two masses.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateSphere(System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a spherical mass of the specified density and radius, with
            center at the origin of the body frame.
            </summary>
            <param name="density">The density of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateSphere(System.Double,System.Double)">
            <summary>
            Creates a spherical mass of the specified density and radius, with
            center at the origin of the body frame.
            </summary>
            <param name="density">The density of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateSphereTotal(System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a spherical mass of the specified total mass and radius, with
            center at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateSphereTotal(System.Double,System.Double)">
            <summary>
            Creates a spherical mass of the specified total mass and radius, with
            center at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateCapsule(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a capsule mass of the specified parameters and density, with
            center at the origin of the body frame.
            </summary>
            <param name="density">The density of the capsule.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder (and the spherical cap).</param>
            <param name="length">The length of the cylinder (not counting the spherical cap).</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateCapsule(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double)">
            <summary>
            Creates a capsule mass of the specified parameters and density, with
            center at the origin of the body frame.
            </summary>
            <param name="density">The density of the capsule.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder (and the spherical cap).</param>
            <param name="length">The length of the cylinder (not counting the spherical cap).</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateCapsuleTotal(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a capsule mass of the specified parameters and total mass, with
            center at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the capsule.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder (and the spherical cap).</param>
            <param name="length">The length of the cylinder (not counting the spherical cap).</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateCapsuleTotal(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double)">
            <summary>
            Creates a capsule mass of the specified parameters and total mass, with
            center at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the capsule.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder (and the spherical cap).</param>
            <param name="length">The length of the cylinder (not counting the spherical cap).</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateCylinder(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a flat-ended cylindrical mass of the specified parameters and
            density, with center at the origin of the body frame.
            </summary>
            <param name="density">The density of the cylinder.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="length">The length of the cylinder.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateCylinder(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double)">
            <summary>
            Creates a flat-ended cylindrical mass of the specified parameters and
            density, with center at the origin of the body frame.
            </summary>
            <param name="density">The density of the cylinder.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="length">The length of the cylinder.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateCylinderTotal(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a flat-ended cylindrical mass of the specified parameters and
            total mass, with center at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the cylinder.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="length">The length of the cylinder.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateCylinderTotal(System.Double,Ode.Net.DirectionAxis,System.Double,System.Double)">
            <summary>
            Creates a flat-ended cylindrical mass of the specified parameters and
            total mass, with center at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the cylinder.</param>
            <param name="direction">The orientation of the cylinder's long axis.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="length">The length of the cylinder.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateBox(System.Double,System.Double,System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a box mass of the given dimensions and density, with center
            at the origin of the body frame.
            </summary>
            <param name="density">The density of the box.</param>
            <param name="lx">The side length of the box along the x axis.</param>
            <param name="ly">The side length of the box along the y axis.</param>
            <param name="lz">The side length of the box along the z axis.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a box mass of the given dimensions and density, with center
            at the origin of the body frame.
            </summary>
            <param name="density">The density of the box.</param>
            <param name="lx">The side length of the box along the x axis.</param>
            <param name="ly">The side length of the box along the y axis.</param>
            <param name="lz">The side length of the box along the z axis.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateBoxTotal(System.Double,System.Double,System.Double,System.Double,Ode.Net.Mass@)">
            <summary>
            Creates a box mass of the given dimensions and total mass, with center
            at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the box.</param>
            <param name="lx">The side length of the box along the x axis.</param>
            <param name="ly">The side length of the box along the y axis.</param>
            <param name="lz">The side length of the box along the z axis.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateBoxTotal(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a box mass of the given dimensions and total mass, with center
            at the origin of the body frame.
            </summary>
            <param name="totalMass">The total mass of the box.</param>
            <param name="lx">The side length of the box along the x axis.</param>
            <param name="ly">The side length of the box along the y axis.</param>
            <param name="lz">The side length of the box along the z axis.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateTriMesh(System.Double,Ode.Net.Collision.TriMesh,Ode.Net.Mass@)">
            <summary>
            Creates a mass for the given triangle mesh with the specified density,
            and center at the geometrical center of mass.
            </summary>
            <param name="density">The density of the triangle mesh.</param>
            <param name="triMesh">The triangle mesh for which to compute mass parameters.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateTriMesh(System.Double,Ode.Net.Collision.TriMesh)">
            <summary>
            Creates a mass for the given triangle mesh with the specified density,
            and center at the geometrical center of mass.
            </summary>
            <param name="density">The density of the triangle mesh.</param>
            <param name="triMesh">The triangle mesh for which to compute mass parameters.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.CreateTriMeshTotal(System.Double,Ode.Net.Collision.TriMesh,Ode.Net.Mass@)">
            <summary>
            Creates a mass for the given triangle mesh with the specified total mass,
            and center at the geometrical center of mass.
            </summary>
            <param name="totalMass">The total mass of the triangle mesh.</param>
            <param name="triMesh">The triangle mesh for which to compute mass parameters.</param>
            <param name="result">The created mass.</param>
        </member>
        <member name="M:Ode.Net.Mass.CreateTriMeshTotal(System.Double,Ode.Net.Collision.TriMesh)">
            <summary>
            Creates a mass for the given triangle mesh with the specified total mass,
            and center at the geometrical center of mass.
            </summary>
            <param name="totalMass">The total mass of the triangle mesh.</param>
            <param name="triMesh">The triangle mesh for which to compute mass parameters.</param>
            <returns>The created mass.</returns>
        </member>
        <member name="M:Ode.Net.Mass.op_Equality(Ode.Net.Mass,Ode.Net.Mass)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Mass"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Mass"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Mass"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            equal mass, center of gravity and inertia matrix; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Mass.op_Inequality(Ode.Net.Mass,Ode.Net.Mass)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Mass"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Mass"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Mass"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ in mass,
            center of gravity or inertia matrix; <b>false</b> if <paramref name="left"/> and
            <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:Ode.Net.Mass.op_Addition(Ode.Net.Mass,Ode.Net.Mass)">
            <summary>
            Adds two <see cref="T:Ode.Net.Mass"/> structures and returns the result as a new
            <see cref="T:Ode.Net.Mass"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Mass"/> structure on the left of the addition operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Mass"/> structure on the right of the addition operator.
            </param>
            <returns>The sum of the two masses.</returns>
        </member>
        <member name="P:Ode.Net.Mass.IsValid">
            <summary>
            Gets a value indicating whether the mass parameters are valid.
            </summary>
        </member>
        <member name="T:Ode.Net.Matrix3">
            <summary>
            Represents a 3x3 matrix.
            </summary>
        </member>
        <member name="F:Ode.Net.Matrix3.Identity">
            <summary>
            Represents the identity matrix.
            </summary>
        </member>
        <member name="F:Ode.Net.Matrix3.Row1">
            <summary>
            Specifies the first row of the matrix.
            </summary>
        </member>
        <member name="F:Ode.Net.Matrix3.Row2">
            <summary>
            Specifies the second row of the matrix.
            </summary>
        </member>
        <member name="F:Ode.Net.Matrix3.Row3">
            <summary>
            Specifies the third row of the matrix.
            </summary>
        </member>
        <member name="M:Ode.Net.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Matrix3"/> structure
            with the specified element values.
            </summary>
            <param name="m11">The value at the first row and first column of the matrix.</param>
            <param name="m12">The value at the first row and second column of the matrix.</param>
            <param name="m13">The value at the first row and third column of the matrix.</param>
            <param name="m21">The value at the second row and first column of the matrix.</param>
            <param name="m22">The value at the second row and second column of the matrix.</param>
            <param name="m23">The value at the second row and third column of the matrix.</param>
            <param name="m31">The value at the third row and first column of the matrix.</param>
            <param name="m32">The value at the third row and second column of the matrix.</param>
            <param name="m33">The value at the third row and third column of the matrix.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Equals(Ode.Net.Matrix3)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Matrix3"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Matrix3"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same element values as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Matrix3"/> and
            has the same element values as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Matrix3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of all the elements in the matrix.
            </returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Negate(Ode.Net.Matrix3)">
            <summary>
            Negates all the elements in the source matrix and returns the result
            as a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The result of negating all the elements in the source matrix.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Negate(Ode.Net.Matrix3@,Ode.Net.Matrix3@)">
            <summary>
            Negates all the elements in the source matrix and returns the result
            as a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value">The source matrix.</param>
            <param name="result">The result of negating all the elements in the source matrix.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Add(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Adds a matrix to another matrix and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The first matrix to add.</param>
            <param name="value2">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Add(Ode.Net.Matrix3@,Ode.Net.Matrix3@,Ode.Net.Matrix3@)">
            <summary>
            Adds a matrix to another matrix and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The first matrix to add.</param>
            <param name="value2">The second matrix to add.</param>
            <param name="result">The sum of the two matrices.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Subtract(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Subtracts a matrix from another matrix and returns the result as a new
            <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The matrix from which the other matrix will be subtracted.</param>
            <param name="value2">The matrix that is to be subtracted.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Subtract(Ode.Net.Matrix3@,Ode.Net.Matrix3@,Ode.Net.Matrix3@)">
            <summary>
            Subtracts a matrix from another matrix and returns the result as a new
            <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The matrix from which the other matrix will be subtracted.</param>
            <param name="value2">The matrix that is to be subtracted.</param>
            <param name="result">The result of the subtraction.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Multiply(Ode.Net.Matrix3,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Multiply(Ode.Net.Matrix3@,System.Double,Ode.Net.Matrix3@)">
            <summary>
            Multiplies a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scalar value.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Multiply(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Multiplies a matrix by another matrix and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The first matrix to multiply.</param>
            <param name="value2">The second matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Multiply(Ode.Net.Matrix3@,Ode.Net.Matrix3@,Ode.Net.Matrix3@)">
            <summary>
            Multiplies a matrix by another matrix and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The first matrix to multiply.</param>
            <param name="value2">The second matrix to multiply.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Divide(Ode.Net.Matrix3,System.Double)">
            <summary>
            Divides a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Divide(Ode.Net.Matrix3@,System.Double,Ode.Net.Matrix3@)">
            <summary>
            Divides a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scalar value.</param>
            <param name="result">The result of the division.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.Divide(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Divides the components of a matrix by the components of another matrix
            and returns the result as a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The matrix whose components will be divided.</param>
            <param name="value2">The divisor matrix.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.Divide(Ode.Net.Matrix3@,Ode.Net.Matrix3@,Ode.Net.Matrix3@)">
            <summary>
            Divides the components of a matrix by the components of another matrix
            and returns the result as a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value1">The matrix whose components will be divided.</param>
            <param name="value2">The divisor matrix.</param>
            <param name="result">The result of the division.</param>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Equality(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Matrix3"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            all their elements equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Inequality(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Matrix3"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ
            in any of their elements; <b>false</b> if <paramref name="left"/> and
            <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_UnaryNegation(Ode.Net.Matrix3)">
            <summary>
            Negates all the elements in the source matrix and returns the result
            as a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The result of negating all the elements in the source matrix.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Addition(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Adds a matrix to another matrix and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the addition operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the addition operator.
            </param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Subtraction(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Subtracts a matrix from another matrix and returns the result as a new
            <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the subtraction operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the subtraction operator.
            </param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Multiply(System.Double,Ode.Net.Matrix3)">
            <summary>
            Multiplies a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The scalar value on the left of the multiplication operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the multiplication operator.
            </param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Multiply(Ode.Net.Matrix3,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the multiplication operator.
            </param>
            <param name="right">
            The scalar value on the right of the multiplication operator.
            </param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Multiply(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Multiplies a matrix by another matrix and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the multiplication operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the multiplication operator.
            </param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Division(Ode.Net.Matrix3,System.Double)">
            <summary>
            Divides a matrix by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the division operator.
            </param>
            <param name="right">
            The scalar value on the right of the division operator.
            </param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ode.Net.Matrix3.op_Division(Ode.Net.Matrix3,Ode.Net.Matrix3)">
            <summary>
            Divides the components of a matrix by the components of another matrix
            and returns the result as a new <see cref="T:Ode.Net.Matrix3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the left of the division operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Matrix3"/> structure on the right of the division operator.
            </param>
            <returns>The result of the division.</returns>
        </member>
        <member name="T:Ode.Net.Engine">
            <summary>
            This class provides methods for ODE initialization and finalization.
            </summary>
        </member>
        <member name="M:Ode.Net.Engine.GetConfiguration">
            <summary>
            Gets the specific ODE build configuration as a sequence of tokens.
            </summary>
            <returns>The ODE configuration string.</returns>
        </member>
        <member name="M:Ode.Net.Engine.CheckConfiguration(System.String)">
            <summary>
            Checks for a specific token in the ODE configuration string.
            This function is case sensitive.
            </summary>
            <param name="token">The configuration token to check for.</param>
            <returns>
            <b>true</b> if the configuration token is present in the ODE
            configuration string; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Engine.Init">
            <summary>
            Initializes the ODE library.
            </summary>
        </member>
        <member name="M:Ode.Net.Engine.Init(Ode.Net.InitFlags)">
            <summary>
            Initializes the ODE library.
            </summary>
            <param name="initFlags">Specifies ODE library initialization options.</param>
        </member>
        <member name="M:Ode.Net.Engine.AllocateDataForThread(Ode.Net.AllocateDataFlags)">
            <summary>
            Allocates thread local data to allow the current thread to call ODE.
            </summary>
            <param name="allocateFlags">Specifies thread allocation options.</param>
        </member>
        <member name="M:Ode.Net.Engine.CleanupAllDataForThread">
            <summary>
            Releases thread local data that was allocated for the current thread.
            </summary>
        </member>
        <member name="M:Ode.Net.Engine.Close">
            <summary>
            Releases all the resources allocated for library including all the
            thread local data that might be allocated for all the threads that
            were using ODE.
            </summary>
        </member>
        <member name="P:Ode.Net.Engine.LogMessages">
            <summary>
            Gets or sets a value indicating whether to log ODE messages to
            the standard error channel.
            </summary>
        </member>
        <member name="T:Ode.Net.OdeException">
            <summary>
            The exception that is thrown when errors occur in the ODE framework.
            </summary>
        </member>
        <member name="M:Ode.Net.OdeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.OdeException"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.OdeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.OdeException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ode.Net.OdeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.OdeException"/> class with a
            specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not <b>null</b>, the current exception is raised in a <b>catch</b> block
            that handles the inner exception.
            </param>
        </member>
        <member name="M:Ode.Net.OdeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.OdeException"/> class from
            serialization data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Ode.Net.Quaternion">
            <summary>
            Represents a four-dimensional vector (w,x,y,z) used to efficiently
            compute angle rotations about the vector axis (x,y,z).
            </summary>
        </member>
        <member name="F:Ode.Net.Quaternion.Identity">
            <summary>
            Represents a <see cref="T:Ode.Net.Quaternion"/> specifying no rotation.
            </summary>
        </member>
        <member name="F:Ode.Net.Quaternion.W">
            <summary>
            Specifies the rotation component of the quaternion.
            </summary>
        </member>
        <member name="F:Ode.Net.Quaternion.X">
            <summary>
            Specifies the x-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:Ode.Net.Quaternion.Y">
            <summary>
            Specifies the y-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="F:Ode.Net.Quaternion.Z">
            <summary>
            Specifies the z-value of the vector component of the quaternion.
            </summary>
        </member>
        <member name="M:Ode.Net.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Quaternion"/> structure
            with the specified component values.
            </summary>
            <param name="w">The value of the rotation component of the quaternion.</param>
            <param name="x">The value of the x-component of the quaternion.</param>
            <param name="y">The value of the y-component of the quaternion.</param>
            <param name="z">The value of the z-component of the quaternion.</param>
        </member>
        <member name="M:Ode.Net.Quaternion.Equals(Ode.Net.Quaternion)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Quaternion"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Quaternion"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same W, X, Y and Z components as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Quaternion.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Quaternion"/> and
            has the same W, X, Y and Z components as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Quaternion.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the W, X, Y and Z components of this instance.
            </returns>
        </member>
        <member name="M:Ode.Net.Quaternion.op_Equality(Ode.Net.Quaternion,Ode.Net.Quaternion)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Quaternion"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Quaternion"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Quaternion"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            equal W, X, Y and Z components; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Quaternion.op_Inequality(Ode.Net.Quaternion,Ode.Net.Quaternion)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Quaternion"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Quaternion"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Quaternion"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ
            in W, X, Y or Z components; <b>false</b> if <paramref name="left"/> and
            <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Ode.Net.Collision.TriMeshData">
            <summary>
            Represents a data object which is used to store triangle mesh data.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Collision.TriMeshData"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.BuildSingle(System.Single[],System.Int32[])">
            <summary>
            Builds the triangle mesh data object with single precision vertex data.
            </summary>
            <param name="vertices">The array of mesh vertices.</param>
            <param name="indices">
            The array of indices forming the triangle mesh. Each element in the array
            represents the index of one of the vertices.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.BuildSingle(System.Single[],System.Int32[],System.Double[])">
            <summary>
            Builds the triangle mesh data object with single precision vertex data
            and pre-calculated normals.
            </summary>
            <param name="vertices">The array of mesh vertices.</param>
            <param name="indices">
            The array of indices forming the triangle mesh. Each element in the array
            represents the index of one of the vertices.
            </param>
            <param name="normals">The array of pre-calculated normals.</param>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.BuildDouble(System.Double[],System.Int32[])">
            <summary>
            Builds the triangle mesh data object with double precision vertex data.
            </summary>
            <param name="vertices">The array of mesh vertices.</param>
            <param name="indices">
            The array of indices forming the triangle mesh. Each element in the array
            represents the index of one of the vertices.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.BuildDouble(System.Double[],System.Int32[],System.Double[])">
            <summary>
            Builds the triangle mesh data object with double precision vertex data
            and pre-calculated normals.
            </summary>
            <param name="vertices">The array of mesh vertices.</param>
            <param name="indices">
            The array of indices forming the triangle mesh. Each element in the array
            represents the index of one of the vertices.
            </param>
            <param name="normals">The array of pre-calculated normals.</param>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.BuildSimple(Ode.Net.Vector3[],System.Int32[])">
            <summary>
            Builds the triangle mesh data object with vertex data.
            </summary>
            <param name="vertices">The array of mesh vertices.</param>
            <param name="indices">
            The array of indices forming the triangle mesh. Each element in the array
            is an index into the vertices array.
            </param>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.BuildSimple(Ode.Net.Vector3[],System.Int32[],System.Double[])">
            <summary>
            Builds the triangle mesh data object with vertex data and
            pre-calculated normals.
            </summary>
            <param name="vertices">The array of mesh vertices.</param>
            <param name="indices">
            The array of indices forming the triangle mesh. Each element in the array
            is an index into the vertices array.
            </param>
            <param name="normals">The array of pre-calculated normals.</param>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.Preprocess">
            <summary>
            Preprocesses the trimesh data to remove unnecessary edges and vertices.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.Update">
            <summary>
            Efficiently updates the internal triangle representation when dynamically
            deforming mesh vertices.
            </summary>
        </member>
        <member name="M:Ode.Net.Collision.TriMeshData.Dispose">
            <summary>
            Destroys the triangle mesh data.
            </summary>
        </member>
        <member name="T:Ode.Net.InitFlags">
            <summary>
            Specifies ODE library initialization options.
            </summary>
        </member>
        <member name="F:Ode.Net.InitFlags.None">
            <summary>
            Specifies that no initialization flags are set. Resources allocated in TLS
            for threads using ODE will be cleared using automatic resource tracking.
            </summary>
        </member>
        <member name="F:Ode.Net.InitFlags.ManualThreadCleanup">
            <summary>
            Specifies that resources allocated in TLS for threads using ODE
            are to be cleared by library client with explicit call.
            </summary>
        </member>
        <member name="T:Ode.Net.AllocateDataFlags">
            <summary>
            Specifies which data is to be pre-allocated in calls to
            <see cref="M:Ode.Net.Engine.AllocateDataForThread(Ode.Net.AllocateDataFlags)"/>.
            </summary>
        </member>
        <member name="F:Ode.Net.AllocateDataFlags.BasicData">
            <summary>
            Specifies that the basic data set required for normal library
            operation should be allocated.
            </summary>
        </member>
        <member name="F:Ode.Net.AllocateDataFlags.CollisionData">
            <summary>
            Specifies that collision detection data should be allocated.
            </summary>
        </member>
        <member name="F:Ode.Net.AllocateDataFlags.All">
            <summary>
            Specifies that all the possible data that is currently defined or will be defined
            in the future should be allocated.
            </summary>
        </member>
        <member name="T:Ode.Net.DirectionAxis">
            <summary>
            Specifies the direction axis for capsule-like masses.
            </summary>
        </member>
        <member name="F:Ode.Net.DirectionAxis.X">
            <summary>
            Specifies that the long axis of the mass is the x-axis.
            </summary>
        </member>
        <member name="F:Ode.Net.DirectionAxis.Y">
            <summary>
            Specifies that the long axis of the mass is the y-axis.
            </summary>
        </member>
        <member name="F:Ode.Net.DirectionAxis.Z">
            <summary>
            Specifies that the long axis of the mass is the z-axis.
            </summary>
        </member>
        <member name="T:Ode.Net.RotationMode">
            <summary>
            Specifies the rotation mode for the axis of a rigid body.
            </summary>
        </member>
        <member name="F:Ode.Net.RotationMode.Infinitesimal">
            <summary>
            Specifies an infinitesimal rotation mode. It is fast to compute,
            but it can occasionally cause inaccuracies at high rotation speeds.
            </summary>
        </member>
        <member name="F:Ode.Net.RotationMode.Finite">
            <summary>
            Specifies a finite rotation mode. It is more costly to compute,
            but more accurate for high speed rotations.
            </summary>
        </member>
        <member name="T:Ode.Net.Vector3">
            <summary>
            Represents a vector with three components.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.One">
            <summary>
            Represents a <see cref="T:Ode.Net.Vector3"/> with ones in all of its components.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.Zero">
            <summary>
            Represents a <see cref="T:Ode.Net.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.UnitX">
            <summary>
            Represents a unit-length <see cref="T:Ode.Net.Vector3"/> that points towards the X axis.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.UnitY">
            <summary>
            Represents a unit-length <see cref="T:Ode.Net.Vector3"/> that points towards the Y axis.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.UnitZ">
            <summary>
            Represents a unit-length <see cref="T:Ode.Net.Vector3"/> that points towards the Z axis.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.X">
            <summary>
            Specifies the x-component of the vector.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.Y">
            <summary>
            Specifies the y-component of the vector.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.Z">
            <summary>
            Specifies the z-component of the vector.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector3.W">
            <summary>
            Provides padding for alignment purposes. This field is unused.
            </summary>
        </member>
        <member name="M:Ode.Net.Vector3.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Vector3"/> structure
            with all components set to the same value.
            </summary>
            <param name="value">The value to initialize each component to.</param>
        </member>
        <member name="M:Ode.Net.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Vector3"/> structure
            with the specified component values.
            </summary>
            <param name="x">The value of the x-component of the vector.</param>
            <param name="y">The value of the y-component of the vector.</param>
            <param name="z">The value of the z-component of the vector.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Equals(Ode.Net.Vector3)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Vector3"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Vector3"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X, Y and Z components as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector3.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Vector3"/> and
            has the same X, Y and Z components as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the X, Y and Z components of this instance.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector3.Negate(Ode.Net.Vector3)">
            <summary>
            Returns a new vector pointing in the opposite direction of the
            source vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>A vector pointing in the opposite direction of the source vector.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Negate(Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Returns a new vector pointing in the opposite direction of the
            source vector.
            </summary>
            <param name="value">The source vector.</param>
            <param name="result">A vector pointing in the opposite direction of the source vector.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Add(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Adds two vectors and returns the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Add(Ode.Net.Vector3@,Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Adds two vectors and returns the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <param name="result">The sum of the two vectors.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Subtract(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Subtracts a vector from another vector and returns the result as a new
            <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The vector from which the other vector will be subtracted.</param>
            <param name="value2">The vector that is to be subtracted.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Subtract(Ode.Net.Vector3@,Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Subtracts a vector from another vector and returns the result as a new
            <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The vector from which the other vector will be subtracted.</param>
            <param name="value2">The vector that is to be subtracted.</param>
            <param name="result">The result of the subtraction.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Multiply(Ode.Net.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Multiply(Ode.Net.Vector3@,System.Double,Ode.Net.Vector3@)">
            <summary>
            Multiplies a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Multiply(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other and returns
            the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The first vector to multiply the components of.</param>
            <param name="value2">The second vector to multiply the components of.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Multiply(Ode.Net.Vector3@,Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Multiplies the components of two vectors by each other and returns
            the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The first vector to multiply the components of.</param>
            <param name="value2">The second vector to multiply the components of.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Divide(Ode.Net.Vector3,System.Double)">
            <summary>
            Divides a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Divide(Ode.Net.Vector3@,System.Double,Ode.Net.Vector3@)">
            <summary>
            Divides a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <param name="result">The result of the division.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Divide(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Divides the components of a vector by the components of another vector
            and returns the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The vector whose components will be divided.</param>
            <param name="value2">The divisor vector.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Divide(Ode.Net.Vector3@,Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Divides the components of a vector by the components of another vector
            and returns the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="value1">The vector whose components will be divided.</param>
            <param name="value2">The divisor vector.</param>
            <param name="result">The result of the division.</param>
        </member>
        <member name="M:Ode.Net.Vector3.Dot(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The dot product of the two source vectors.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.Dot(Ode.Net.Vector3@,Ode.Net.Vector3@,System.Double@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">The dot product of the two source vectors.</param>
        </member>
        <member name="M:Ode.Net.Vector3.op_Equality(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Vector3"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            equal X, Y and Z components; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Inequality(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Vector3"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ
            in X, Y or Z components; <b>false</b> if <paramref name="left"/> and
            <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_UnaryNegation(Ode.Net.Vector3)">
            <summary>
            Returns a new vector pointing in the opposite direction of the
            source vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>A vector pointing in the opposite direction of the source vector.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Addition(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Adds two vectors and returns the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the addition operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the addition operator.
            </param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Subtraction(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Subtracts a vector from another vector and returns the result as a new
            <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the subtraction operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the subtraction operator.
            </param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Multiply(System.Double,Ode.Net.Vector3)">
            <summary>
            Multiplies a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The scalar value on the left of the multiplication operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the multiplication operator.
            </param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Multiply(Ode.Net.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the multiplication operator.
            </param>
            <param name="right">
            The scalar value on the right of the multiplication operator.
            </param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Multiply(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other and returns
            the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the multiplication operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the multiplication operator.
            </param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Division(Ode.Net.Vector3,System.Double)">
            <summary>
            Divides a vector by a scalar value and returns the result as
            a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the division operator.
            </param>
            <param name="right">
            The scalar value on the right of the division operator.
            </param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Ode.Net.Vector3.op_Division(Ode.Net.Vector3,Ode.Net.Vector3)">
            <summary>
            Divides the components of a vector by the components of another vector
            and returns the result as a new <see cref="T:Ode.Net.Vector3"/>.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector3"/> structure on the left of the division operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector3"/> structure on the right of the division operator.
            </param>
            <returns>The result of the division.</returns>
        </member>
        <member name="T:Ode.Net.Vector4">
            <summary>
            Represents a vector with four components.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector4.Zero">
            <summary>
            Represents a <see cref="T:Ode.Net.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector4.X">
            <summary>
            Specifies the x-component of the vector.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector4.Y">
            <summary>
            Specifies the y-component of the vector.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector4.Z">
            <summary>
            Specifies the z-component of the vector.
            </summary>
        </member>
        <member name="F:Ode.Net.Vector4.W">
            <summary>
            Specifies the w-component of the vector.
            </summary>
        </member>
        <member name="M:Ode.Net.Vector4.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Vector4"/> structure
            with all components set to the same value.
            </summary>
            <param name="value">The value to initialize each component to.</param>
        </member>
        <member name="M:Ode.Net.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.Vector4"/> structure
            with the specified component values.
            </summary>
            <param name="x">The value of the x-component of the vector.</param>
            <param name="y">The value of the y-component of the vector.</param>
            <param name="z">The value of the z-component of the vector.</param>
            <param name="w">The value of the w-component of the vector.</param>
        </member>
        <member name="M:Ode.Net.Vector4.Equals(Ode.Net.Vector4)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:Ode.Net.Vector4"/> value.
            </summary>
            <param name="other">A <see cref="T:Ode.Net.Vector4"/> value to compare to this instance.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> has the same X, Y, Z and W components as
            this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector4.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is an instance of <see cref="T:Ode.Net.Vector4"/> and
            has the same X, Y, Z and W components as this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Ode.Net.Vector4.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the X, Y, Z and W components of this instance.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector4.op_Equality(Ode.Net.Vector4,Ode.Net.Vector4)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Vector4"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector4"/> structure on the left of the equality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector4"/> structure on the right of the equality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> have
            equal X, Y, Z and W components; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Ode.Net.Vector4.op_Inequality(Ode.Net.Vector4,Ode.Net.Vector4)">
            <summary>
            Tests whether two <see cref="T:Ode.Net.Vector4"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Ode.Net.Vector4"/> structure on the left of the inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Ode.Net.Vector4"/> structure on the right of the inequality operator.
            </param>
            <returns>
            <b>true</b> if <paramref name="left"/> and <paramref name="right"/> differ
            in X, Y, Z or W components; <b>false</b> if <paramref name="left"/> and
            <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Ode.Net.AllocateBlock">
            <summary>
            Represents a function to allocate a memory block of a specified size.
            </summary>
            <param name="blockSize">The size of the memory block.</param>
            <returns>A pointer to the newly allocated memory block.</returns>
        </member>
        <member name="T:Ode.Net.ShrinkBlock">
            <summary>
            Represents a function to shrink an existing memory block to a smaller size.
            The contents of the block head must be preserved while shrinking. The new
            block size is guaranteed to be always less than the existing one.
            </summary>
            <param name="blockPointer">A pointer to an existing memory block.</param>
            <param name="blockCurrentSize">The current size of the memory block.</param>
            <param name="blockSmallerSize">The new size of the memory block.</param>
            <returns>A pointer to the reallocated memory block.</returns>
        </member>
        <member name="T:Ode.Net.FreeBlock">
            <summary>
            Represents a function to delete an existing memory block.
            </summary>
            <param name="blockPointer">A pointer to an existing memory block.</param>
            <param name="blockCurrentSize">The current size of the memory block.</param>
        </member>
        <member name="T:Ode.Net.WorldStepMemoryManager">
            <summary>
            Represents the memory manager used by world stepping functions.
            </summary>
        </member>
        <member name="M:Ode.Net.WorldStepMemoryManager.#ctor(Ode.Net.AllocateBlock,Ode.Net.ShrinkBlock,Ode.Net.FreeBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.WorldStepMemoryManager"/> class
            with the specified memory handling callbacks.
            </summary>
            <param name="allocateBlock">
            A function to allocate a memory block of a specified size.
            </param>
            <param name="shrinkBlock">
            A function to shrink an existing memory block to a smaller size.
            </param>
            <param name="freeBlock">
            A function to delete an existing memory block.
            </param>
        </member>
        <member name="P:Ode.Net.WorldStepMemoryManager.Allocate">
            <summary>
            Gets the function used to allocate new memory blocks.
            </summary>
        </member>
        <member name="P:Ode.Net.WorldStepMemoryManager.Shrink">
            <summary>
            Gets the function used to shrink existing memory blocks to a smaller size.
            </summary>
        </member>
        <member name="P:Ode.Net.WorldStepMemoryManager.Free">
            <summary>
            Gets the function used to delete existing memory blocks.
            </summary>
        </member>
        <member name="T:Ode.Net.WorldStepMemoryReservationPolicy">
            <summary>
            Represents a memory reservation policy descriptor for world stepping functions.
            </summary>
        </member>
        <member name="M:Ode.Net.WorldStepMemoryReservationPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.WorldStepMemoryReservationPolicy"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.WorldStepMemoryReservationPolicy.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.WorldStepMemoryReservationPolicy"/> class with
            the specified memory reservation policy parameters.
            </summary>
            <param name="reserveFactor">
            A quotient that is multiplied by required memory size to allocate extra
            reserve whenever reallocation is needed.
            </param>
        </member>
        <member name="M:Ode.Net.WorldStepMemoryReservationPolicy.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.WorldStepMemoryReservationPolicy"/> class with
            the specified memory reservation policy parameters.
            </summary>
            <param name="reserveFactor">
            A quotient that is multiplied by required memory size to allocate extra
            reserve whenever reallocation is needed.
            </param>
            <param name="reserveMinimum">
            A minimum size that is checked against whenever reallocation is needed
            to allocate expected working memory minimum at once without extra
            reallocations as number of bodies/joints grows.
            </param>
        </member>
        <member name="P:Ode.Net.WorldStepMemoryReservationPolicy.ReserveFactor">
            <summary>
            Gets or sets a quotient that is multiplied by required memory size
            to allocate extra reserve whenever reallocation is needed.
            </summary>
        </member>
        <member name="P:Ode.Net.WorldStepMemoryReservationPolicy.ReserveMinimum">
            <summary>
            Gets or sets a minimum size that is checked against whenever reallocation
            is needed to allocate expected working memory minimum at once without extra
            reallocations as number of bodies/joints grows.
            </summary>
        </member>
        <member name="T:Ode.Net.World">
            <summary>
            Represents a container for rigid bodies and joints.
            </summary>
        </member>
        <member name="F:Ode.Net.World.StepThreadCountUnlimited">
            <summary>
            Represents an unlimited number of island step threads when setting
            thread count properties. This field is constant.
            </summary>
        </member>
        <member name="M:Ode.Net.World.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ode.Net.World"/> class.
            </summary>
        </member>
        <member name="M:Ode.Net.World.UseSharedWorkingMemory(Ode.Net.World)">
            <summary>
            Sets the world to use shared working memory along with another world.
            </summary>
            <param name="fromWorld">The world to use shared memory with.</param>
            <exception cref="T:System.InvalidOperationException">
            Failed to setup shared working memory between the two worlds.
            </exception>
        </member>
        <member name="M:Ode.Net.World.CleanupWorkingMemory">
            <summary>
            Releases internal working memory allocated for the world.
            </summary>
        </member>
        <member name="M:Ode.Net.World.SetStepMemoryReservationPolicy(Ode.Net.WorldStepMemoryReservationPolicy)">
            <summary>
            Sets the memory reservation policy to be used with world stepping operations.
            </summary>
            <param name="policyInfo">
            The memory reservation policy descriptor. If the descriptor is <b>null</b>,
            the current reservation policy will be reset to default parameters.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Failed to set memory reservation policy for world stepping operations.
            </exception>
        </member>
        <member name="M:Ode.Net.World.SetStepMemoryManager(Ode.Net.WorldStepMemoryManager)">
            <summary>
            Sets the memory manager to be used with world stepping operations.
            </summary>
            <param name="memoryManager">
            The memory manager descriptor. If the descriptor is <b>null</b>,
            the default memory manager is used.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Failed to set memory manager for world stepping operations.
            </exception>
        </member>
        <member name="M:Ode.Net.World.Step(System.Double)">
            <summary>
            Steps the world using the specified time delta.
            </summary>
            <param name="stepSize">
            The number of seconds that the simulation has to advance.
            </param>
            <exception cref="T:System.InsufficientMemoryException">
            The memory allocation has failed for operation. In such a case all the
            objects remain in unchanged state and simulation can be retried as soon
            as more memory is available.
            </exception>
        </member>
        <member name="M:Ode.Net.World.QuickStep(System.Double)">
            <summary>
            Quick-steps the world using the specified time delta. For large systems
            this is much faster than <see cref="M:Ode.Net.World.Step(System.Double)"/>, but it is less accurate.
            </summary>
            <param name="stepSize">
            The number of seconds that the simulation has to advance.
            </param>
            <exception cref="T:System.InsufficientMemoryException">
            The memory allocation has failed for operation. In such a case all the
            objects remain in unchanged state and simulation can be retried as soon
            as more memory is available.
            </exception>
        </member>
        <member name="M:Ode.Net.World.ImpulseToForce(System.Double,Ode.Net.Vector3)">
            <summary>
            Converts an impulse to a force.
            </summary>
            <param name="stepSize">The step size for the next step that will be taken.</param>
            <param name="impulse">A linear or angular impulse to a rigid body.</param>
            <returns>
            The scaled force or torque vector to be added to the rigid body.
            </returns>
        </member>
        <member name="M:Ode.Net.World.ImpulseToForce(System.Double,Ode.Net.Vector3@,Ode.Net.Vector3@)">
            <summary>
            Converts an impulse to a force.
            </summary>
            <param name="stepSize">The step size for the next step that will be taken.</param>
            <param name="impulse">A linear or angular impulse to a rigid body.</param>
            <param name="force">
            When this method returns, contains the scaled force or torque vector
            to be added to the rigid body.
            </param>
        </member>
        <member name="M:Ode.Net.World.SetDamping(System.Double,System.Double)">
            <summary>
            Sets both linear and angular damping scales.
            </summary>
            <param name="linearScale">
            The linear damping scale that is to be applied to newly created bodies.
            </param>
            <param name="angularScale">
            The angular damping scale that is to be applied to newly created bodies.
            </param>
        </member>
        <member name="M:Ode.Net.World.Dispose">
            <summary>
            Destroys the world and everything in it.
            </summary>
        </member>
        <member name="P:Ode.Net.World.Gravity">
            <summary>
            Gets or sets the world's global gravity vector.
            </summary>
        </member>
        <member name="P:Ode.Net.World.Erp">
            <summary>
            Gets or sets the global ERP value, that controls how much error
            correction is performed in each time step.
            </summary>
        </member>
        <member name="P:Ode.Net.World.Cfm">
            <summary>
            Gets or sets the global CFM (constraint force mixing) value.
            </summary>
        </member>
        <member name="P:Ode.Net.World.StepIslandsProcessingMaxThreadCount">
            <summary>
            Gets or sets the maximum number of threads to be used for island stepping.
            </summary>
        </member>
        <member name="P:Ode.Net.World.QuickStepNumIterations">
            <summary>
            Gets or sets the number of iterations that the QuickStep method
            performs per step.
            </summary>
        </member>
        <member name="P:Ode.Net.World.QuickStepW">
            <summary>
            Gets or sets the SOR over-relaxation parameter.
            </summary>
        </member>
        <member name="P:Ode.Net.World.ContactMaxCorrectingVelocity">
            <summary>
            Gets or sets the maximum correcting velocity that contacts are allowed
            to generate.
            </summary>
        </member>
        <member name="P:Ode.Net.World.ContactSurfaceLayer">
            <summary>
            Gets or sets the depth of the surface layer around all geometry objects.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AutoDisableLinearThreshold">
            <summary>
            Gets or sets the auto-disable linear velocity threshold for newly created bodies.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AutoDisableAngularThreshold">
            <summary>
            Gets or sets the auto-disable angular velocity threshold for newly created bodies.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AutoDisableAverageSamplesCount">
            <summary>
            Gets or sets the auto-disable average velocity sample count for newly created bodies.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AutoDisableSteps">
            <summary>
            Gets or sets the number of simulation steps newly created bodies have to be idle for
            in order to automatically disable themselves.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AutoDisableTime">
            <summary>
            Gets or sets the amount of simulation time newly created bodies have to be idle for
            in order to automatically disable themselves.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AutoDisable">
            <summary>
            Gets or sets a value indicating whether newly created bodies should automatically
            disable themselves when they have been idle for some specified period of time.
            </summary>
        </member>
        <member name="P:Ode.Net.World.LinearDampingThreshold">
            <summary>
            Gets or sets the world's linear velocity damping threshold.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AngularDampingThreshold">
            <summary>
            Gets or sets the world's angular velocity damping threshold.
            </summary>
        </member>
        <member name="P:Ode.Net.World.LinearDamping">
            <summary>
            Gets or sets the world's linear velocity damping scale.
            </summary>
        </member>
        <member name="P:Ode.Net.World.AngularDamping">
            <summary>
            Gets or sets the world's angular velocity damping scale.
            </summary>
        </member>
        <member name="P:Ode.Net.World.MaxAngularSpeed">
            <summary>
            Gets or sets the default maximum angular speed for new bodies.
            </summary>
        </member>
    </members>
</doc>
