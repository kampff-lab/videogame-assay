<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhythm.Net</name>
    </assembly>
    <members>
        <member name="T:Rhythm.Net.Rhd2000DataBlock">
            <summary>
            This class creates a data structure storing data samples from a Rhythm FPGA interface
            controlling up to 8 RHD2000 chips. Typically, instances of <see cref="T:Rhythm.Net.Rhd2000DataBlock"/>
            will be created dynamically as data becomes available over the USB interface and appended
            to a queue that will be used to stream the data to disk or to a GUI display.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000DataBlock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhythm.Net.Rhd2000DataBlock"/> class.
            Allocates memory for a data block supporting the specified number of data streams.
            </summary>
            <param name="numDataStreams">The number of available data streams.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000DataBlock.CalculateDataBlockSizeInWords(System.Int32)">
            <summary>
            Returns the number of 16-bit words in a USB data block with
            <paramref name="numDataStreams"/> data streams enabled.
            </summary>
            <param name="numDataStreams">The number of enabled data streams.</param>
            <returns>The number of 16-bit words in the USB data block.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000DataBlock.GetSamplesPerDataBlock">
            <summary>
            Returns the number of samples in a USB data block.
            </summary>
            <returns>The number of samples in a USB data block.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000DataBlock.FillFromUsbBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fills the data block with raw data from the nth data block in a USB input buffer
            in an <see cref="T:Rhythm.Net.Rhd2000EvalBoard"/> object.
            </summary>
            <param name="usbBuffer">The raw USB input buffer data.</param>
            <param name="blockIndex">
            The index of the selected buffer data block. Setting blockIndex to 0 selects the
            first data block in the buffer, setting blockIndex to 1 selects the second data
            block, etc.
            </param>
            <param name="numDataStreams">The number of available data streams.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000DataBlock.Print(System.Int32)">
            <summary>
            Prints the contents of RHD2000 registers from a selected USB data stream (0-7)
            to the console. This function assumes that the command string generated by
            <see cref="M:Rhythm.Net.Rhd2000Registers.CreateCommandListRegisterConfig(System.Collections.Generic.List{System.Int32},System.Boolean)"/> has been
            uploaded to the AuxCmd3 slot.
            </summary>
            <param name="stream">The index of the selected USB data stream.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000DataBlock.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes the contents of a data block object to a binary output stream in little endian
            format (i.e., least significant byte first).
            </summary>
            <param name="saveOut">The binary output stream on which to write data block contents.</param>
            <param name="numDataStreams">The number of available data streams.</param>
        </member>
        <member name="P:Rhythm.Net.Rhd2000DataBlock.Timestamp">
            <summary>
            Gets the array of 32-bit sample timestamps.
            </summary>
        </member>
        <member name="P:Rhythm.Net.Rhd2000DataBlock.AmplifierData">
            <summary>
            Gets the array of multidimensional amplifier data samples, indexed by data stream.
            </summary>
        </member>
        <member name="P:Rhythm.Net.Rhd2000DataBlock.AuxiliaryData">
            <summary>
            Gets the array of multidimensional auxiliary data samples, indexed by data stream.
            </summary>
        </member>
        <member name="P:Rhythm.Net.Rhd2000DataBlock.BoardAdcData">
            <summary>
            Gets the multidimensional array of board ADC data samples.
            </summary>
        </member>
        <member name="P:Rhythm.Net.Rhd2000DataBlock.TtlIn">
            <summary>
            Gets an array indicating the state of the 16 digital TTL input lines on the FPGA.
            </summary>
        </member>
        <member name="P:Rhythm.Net.Rhd2000DataBlock.TtlOut">
            <summary>
            Gets an array indicating the state of the 16 digital TTL output lines on the FPGA.
            </summary>
        </member>
        <member name="T:Rhythm.Net.Rhd2000EvalBoard">
            <summary>
            This class provides access to and control of the Opal Kelly XEM6010 USB/FPGA interface board running the Rhythm interface
            Verilog code. Only one instance of the <see cref="T:Rhythm.Net.Rhd2000EvalBoard"/> object is needed to control a Rhythm-based FPGA interface.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhythm.Net.Rhd2000EvalBoard"/> class.
            Sets the sampling rate to 30.0 kS/s/channel (FPGA default).
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.Open">
            <summary>
            Finds an Opal Kelly XEM6010-LX45 board attached to a USB port and opens it.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.UploadFpgaBitfile(System.String)">
            <summary>
            Uploads the Rhythm configuration file (i.e. bitfile) to the Xilinx FPGA on the Opal Kelly board.
            </summary>
            <param name="fileName">The path to the Rhythm configuration file.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.Initialize">
            <summary>
            Initializes Rhythm FPGA registers to default values.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetSampleRate(Rhythm.Net.AmplifierSampleRate)">
            <summary>
            Sets the per-channel sampling rate of the RHD2000 chips connected to the Rhythm FPGA.
            </summary>
            <param name="newSampleRate">The new per-channel sampling rate for RHD2000 chips connected to the Rhythm FPGA.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetSampleRate">
            <summary>
            Returns the current per-channel sampling rate (in Hz) as a floating-point number.
            </summary>
            <returns>The current per-channel sampling rate (in Hz) as a floating-point number.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetSampleRateEnum">
            <summary>
            Gets the current per-channel sampling rate as an <see cref="T:Rhythm.Net.AmplifierSampleRate"/> enumeration.
            </summary>
            <returns>The current per-channel sampling rate as an <see cref="T:Rhythm.Net.AmplifierSampleRate"/> enumeration.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.UploadCommandList(System.Collections.Generic.List{System.Int32},Rhythm.Net.AuxCmdSlot,System.UInt32)">
            <summary>
            Uploads a command list (generated by an instance of the <see cref="T:Rhythm.Net.Rhd2000Registers"/> class) to a particular auxiliary command slot and
            RAM bank (0-15) on the FPGA.
            </summary>
            <param name="commandList">A command list generated by an instance of the <see cref="T:Rhythm.Net.Rhd2000Registers"/> class.</param>
            <param name="auxCommandSlot">The auxiliary command slot on which to upload the command list.</param>
            <param name="bank">The RAM bank (0-15) on which to upload the command list.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.PrintCommandList(System.Collections.Generic.List{System.Int32})">
            <summary>
            Prints a command list (generated by an instance of the <see cref="T:Rhythm.Net.Rhd2000Registers"/> class) to the console in readable form, for
            diagnostic purposes.
            </summary>
            <param name="commandList">A command list generated by an instance of the <see cref="T:Rhythm.Net.Rhd2000Registers"/> class.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SelectAuxCommandBank(Rhythm.Net.BoardPort,Rhythm.Net.AuxCmdSlot,System.Int32)">
            <summary>
            Selects an auxiliary command slot (AuxCmd1, AuxCmd2, or AuxCmd3) and bank (0-15) for a particular SPI port.
            </summary>
            <param name="port">The SPI port on which the auxiliary command slot is selected.</param>
            <param name="auxCommandSlot">The auxiliary command slot to be selected.</param>
            <param name="bank">The RAM bank (0-15) to be selected.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SelectAuxCommandLength(Rhythm.Net.AuxCmdSlot,System.Int32,System.Int32)">
            <summary>
            Specifies a command sequence end point (endIndex = 0-1023) and command loop index (loopIndex = 0-1023) for a particular
            auxiliary command slot (AuxCmd1, AuxCmd2, or AuxCmd3).
            </summary>
            <param name="auxCommandSlot">The auxiliary command slot on which to specify the command sequence length.</param>
            <param name="loopIndex">The command sequence loop index (0-1023).</param>
            <param name="endIndex">The command sequence end point index (0-1023).</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.ResetBoard">
            <summary>
            Resets the FPGA. This clears all auxiliary command RAM banks, clears the USB FIFO, and resets the
            per-channel sampling rate to its default value of 30.0 kS/s/channel.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetContinuousRunMode(System.Boolean)">
            <summary>
            Sets the FPGA to run continuously once started (if continuousMode is set to true) or to run until
            maxTimeStep is reached (if continuousMode is set to false).
            </summary>
            <param name="continuousMode">
            Set the FPGA to run continuously once started if set to true or to run until
            maxTimeStep is reached if set to false.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetMaxTimeStep(System.UInt32)">
            <summary>
            Sets maxTimeStep for cases where continuousMode is set to false.
            </summary>
            <param name="maxTimeStep">
            The maxTimeStep (in number of samples) for which to run the
            interface when continuousMode is set to false.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.Run">
            <summary>
            Starts SPI data acquisition.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.IsRunning">
            <summary>
            Returns true if the FPGA is currently running SPI data acquisition.
            </summary>
            <returns>True if the FPGA is currently running SPI data acquisition, false otherwise.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.NumWordsInFifo">
            <summary>
            Returns the number of 16-bit words in the USB FIFO. The user should never attempt to read
            more data than the FIFO currently contains, as it is not protected against underflow.
            </summary>
            <returns>The number of 16-bit words in the USB FIFO.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.FifoCapacityInWords">
            <summary>
            Returns the number of 16-bit words in the USB SDRAM FIFO can hold (67,108,864). The FIFO can actually hold a few
            thousand words more than this due to the on-FPGA mini-FIFOs used to interface with the SDRAM,
            but this function provides a conservative estimate of maximum FIFO capacity.
            </summary>
            <returns>The number of 16-bit words in the USB SDRAM FIFO.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.MaxNumDataStreams">
            <summary>
            Returns the maximum number of data streams available in the eval board.
            </summary>
            <returns>The maximum number of data streams available in the eval board.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetCableDelay(Rhythm.Net.BoardPort,System.Int32)">
            <summary>
            Sets the delay for sampling the MISO line on a particular SPI port (PortA - PortD), in integer clock
            steps, where each clock step is 1/2800 of a per-channel sampling period.
            </summary>
            <param name="port">The SPI port for which to set the MISO line sampling delay.</param>
            <param name="delay">The delay for sampling the MISO line, in integer clock steps.</param>
            <remarks>
            Cable delay must be updated after any changes are made to the sampling rate, since cable delay
            calculations are based on the clock period.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetCableLengthMeters(Rhythm.Net.BoardPort,System.Double)">
            <summary>
            Sets the delay for sampling the MISO line on a particular SPI port (PortA - PortD) based on the length
            of the cable between the FPGA and the RHD2000 chip (in meters).
            </summary>
            <param name="port">The SPI port for which to set the MISO line sampling delay.</param>
            <param name="lengthInMeters">The length of the cable between the FPGA and the RHD2000 chip (in meters).</param>
            <remarks>
            Cable delay must be updated after any changes are made to the sampling rate, since cable delay
            calculations are based on the clock period.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetCableLengthFeet(Rhythm.Net.BoardPort,System.Double)">
            <summary>
            Sets the delay for sampling the MISO line on a particular SPI port (PortA - PortD) based on the length
            of the cable between the FPGA and the RHD2000 chip (in feet).
            </summary>
            <param name="port">The SPI port for which to set the MISO line sampling delay.</param>
            <param name="lengthInFeet">The length of the cable between the FPGA and the RHD2000 chip (in feet).</param>
            <remarks>
            Cable delay must be updated after any changes are made to the sampling rate, since cable delay
            calculations are based on the clock period.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EstimateCableLengthMeters(System.Int32)">
            <summary>
            Estimates the cable length (in meters) between the FPGA and the RHD2000 chip based on a particular delay
            used in setCableDelay and the current sampling rate.
            </summary>
            <param name="delay">The delay for sampling the MISO line, in integer clock steps.</param>
            <returns>The estimated cable length (in meters) between the FPGA and the RHD2000 chip.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EstimateCableLengthFeet(System.Int32)">
            <summary>
            Estimates the cable length (in feet) between the FPGA and the RHD2000 chip based on a particular delay
            used in setCableDelay and the current sampling rate.
            </summary>
            <param name="delay">The delay for sampling the MISO line, in integer clock steps.</param>
            <returns>The estimated cable length (in feet) between the FPGA and the RHD2000 chip.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetDspSettle(System.Boolean)">
            <summary>
            Turns on or off the DSP settle function in the FPGA. This only executes when CONVERT commands are executed
            by the RHD2000.
            </summary>
            <param name="enabled">Turns on DSP settle if set to true, turns it off otherwise.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetDataSource(System.Int32,Rhythm.Net.BoardDataSource)">
            <summary>
            Assigns a particular data source (e.g., PortA1, PortA2, PortB1,...) to one of the eight
            available USB data streams (0-7).
            </summary>
            <param name="stream">The USB data stream (0-7) for which to assign the data source.</param>
            <param name="dataSource">
            The particular data source (e.g., PortA1, PortA2, PortB1,...) to assign
            to one of the available USB data streams.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EnableDataStream(System.Int32,System.Boolean)">
            <summary>
            Enables or disables one of the eight available USB data streams (0-7).
            </summary>
            <param name="stream">The USB data stream (0-7) to enable or disable.</param>
            <param name="enabled">Enables the USB data stream if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetNumEnabledDataStreams">
            <summary>
            Returns the number of enabled USB data streams.
            </summary>
            <returns>The number of enabled USB data streams.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.ClearTtlOut">
            <summary>
            Sets all 16 bits of the digital TTL output lines on the FPGA to zero.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetTtlOut(System.Int32[])">
            <summary>
            Sets the 16 bits of the digital TTL output lines on the FPGA high or low according to an integer array.
            </summary>
            <param name="ttlOutArray">
            A length-16 array containing values of 0 or 1 to specify high or low bits in the TTL output lines.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetTtlIn(System.Int32[])">
            <summary>
            Reads the 16 bits of the digital TTL input lines on the FPGA into an integer array.
            </summary>
            <param name="ttlInArray">
            A length-16 integer array that will contain the bits from the TTL input lines.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetDacManual(System.Int32)">
            <summary>
            Sets the manual AD5662 DAC control WireIns to the specified value (0-65536).
            </summary>
            <param name="value">
            The 16-bit value (0-65536) to which the manual DAC control WireIns will be set.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetLedDisplay(System.Int32[])">
            <summary>
            Sets the eight red LEDs on the Opal Kelly XEM6010 board according to an integer array.
            </summary>
            <param name="ledArray">The length-8 integer array specifying the state of each of the eight red LEDs (0 or 1).</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EnableDac(System.Int32,System.Boolean)">
            <summary>
            Enables or disables the AD5662 DACs connected to the FPGA.
            </summary>
            <param name="dacChannel">The AD5662 DAC channel (0-7) to enable or disable.</param>
            <param name="enabled">Enables the channel if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetDacGain(System.Int32)">
            <summary>
            Scales the digital signals to all eight AD5662 DACs by a factor of 2^<paramref name="gain"/>.
            </summary>
            <param name="gain">A number between 0 and 7 indicating the power of two by which to scale digital signals.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetAudioNoiseSuppress(System.Int32)">
            <summary>
            Sets the noise slicing region for DAC channels 1 and 2 (i.e., audio left and right) to +/-16*<paramref name="noiseSuppress"/> LSBs,
            where noiseSuppress is between 0 and 127. This improves the audibility of weak neural spikes in noisy waveforms.
            </summary>
            <param name="noiseSuppress">A number between 0 and 127 specifying the audio noise suppression factor.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SelectDacDataStream(System.Int32,System.Int32)">
            <summary>
            Assigns a particular data stream (0-7) to an AD5662 DAC channel (0-7). Setting stream
            to 8 selects DacManual1 value; setting stream to 9 selects DacManual2 value.
            </summary>
            <param name="dacChannel">The DAC channel to which the data stream will be assigned.</param>
            <param name="stream">The data stream to assign to the DAC channel.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SelectDacDataChannel(System.Int32,System.Int32)">
            <summary>
            Assigns a particular amplifier channel (0-31) to an AD5662 DAC channel (0-7).
            </summary>
            <param name="dacChannel">The DAC channel to which the amplifier channel will be assigned.</param>
            <param name="dataChannel">The amplifier channel to assign to the DAC channel.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EnableExternalFastSettle(System.Boolean)">
            <summary>
            Enables or disables external triggering of amplifier hardware 'fast settle' function (blanking).
            </summary>
            <param name="enable">
            Enables external triggering of 'fast settle' function if set to true or disables it
            if set to false.
            </param>
            <remarks>
            If external triggering is enabled, the fast settling of amplifiers on all connected
            chips will be controlled in real time via one of the 16 TTL inputs.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetExternalFastSettleChannel(System.Int32)">
            <summary>
            Selects which of the TTL inputs 0-15 is used to perform a hardware 'fast settle' (blanking)
            of the amplifiers if external triggering of fast settling is enabled.
            </summary>
            <param name="channel">
            The TTL input channel used to trigger a 'fast settle' of all connected chips.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EnableExternalDigOut(Rhythm.Net.BoardPort,System.Boolean)">
            <summary>
            Enables or disables external control of RHD2000 auxiliary digital output pin (auxout).
            </summary>
            <param name="port">
            The SPI port for which to enable or disable external control of RHD2000 auxiliary
            digital output pin.
            </param>
            <param name="enable">
            Enables external control of RHD2000 auxiliary digital output pin if set to true or
            disables it if set to false.
            </param>
            <remarks>
            If external control is enabled, the digital output of all chips connected to a
            selected SPI port will be controlled in real time via one of the 16 TTL inputs.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetExternalDigOutChannel(Rhythm.Net.BoardPort,System.Int32)">
            <summary>
            Selects which of the TTL inputs 0-15 is used to control the auxiliary digital output
            pin of the chips connected to a particular SPI port, if external control of auxout is enabled.
            </summary>
            <param name="port">
            Specifies the SPI port where the controlled auxiliary digital output pins are connected.
            </param>
            <param name="channel">
            The TTL input channel used to control the auxiliary digital output pin of the chips connected
            to the specified SPI port.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.EnableDacHighpassFilter(System.Boolean)">
            <summary>
            Enables or disables optional FPGA-implemented digital high-pass filters associated with DAC
            outputs on USB interface board.
            </summary>
            <param name="enable">
            Enables optional high-pass filters associated with DAC outputs if set to true or disables
            them if set to false.
            </param>
            <remarks>
            These one-pole filters can be used to record wideband neural data while viewing only spikes
            without LFPs on the DAC outputs, for example.  This is useful when using the low-latency
            FPGA thresholds to detect spikes and produce digital pulses on the TTL outputs, for example.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetDacHighpassFilter(System.Double)">
            <summary>
            Sets cutoff frequency (in Hz) for optional FPGA-implemented digital high-pass filters
            associated with DAC outputs on USB interface board.
            </summary>
            <param name="cutoff">
            The cutoff frequency (in Hz) for the DAC output high-pass filters.
            </param>
            <remarks>
            These one-pole filters can be used to record wideband neural data while viewing only spikes
            without LFPs on the DAC outputs, for example.  This is useful when using the low-latency
            FPGA thresholds to detect spikes and produce digital pulses on the TTL outputs, for example.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetDacThreshold(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets thresholds for DAC channels; threshold output signals appear on TTL outputs 0-7.
            </summary>
            <param name="dacChannel"></param>
            <param name="threshold">
            The RHD2000 chip ADC output value, falling in the range of 0 to 65535, where the
            'zero' level is 32768.
            </param>
            <param name="trigPolarity">
            If trigPolarity is true, voltages equaling or rising above the threshold produce a high TTL
            output; otherwise, voltages equaling or falling below the threshold produce a high TTL output.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.SetTtlMode(System.Int32)">
            <summary>
            Sets the TTL output mode of the board.
            </summary>
            <param name="mode">
            If set to 0, all 16 TTL outputs are under manual control; if set to 1,
            the top 8 TTL outputs are under manual control; while the bottom 8 TTL
            outputs are outputs of DAC comparators.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.Flush">
            <summary>
            Flushes all remaining data out of the FIFO. This function should only be called when
            SPI data acquisition has been stopped.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.ReadDataBlock(Rhythm.Net.Rhd2000DataBlock)">
            <summary>
            Reads a data block from the USB interface, if one is available, and stores the data into
            an <see cref="T:Rhythm.Net.Rhd2000DataBlock"/> object.
            </summary>
            <param name="dataBlock">The <see cref="T:Rhythm.Net.Rhd2000DataBlock"/> object used to store the data.</param>
            <returns>True if a data block was available, false otherwise.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.ReadDataBlocks(System.Int32,System.Collections.Generic.Queue{Rhythm.Net.Rhd2000DataBlock})">
            <summary>
            Reads a specified number of data blocks from the USB interface and appends them to <paramref name="dataQueue"/>.
            </summary>
            <param name="numBlocks">The number of blocks to read from the USB interface.</param>
            <param name="dataQueue">A queue of data blocks on which to append available data.</param>
            <returns>True if the specified number of data blocks was available, false otherwise.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.QueueToFile(System.Collections.Generic.Queue{Rhythm.Net.Rhd2000DataBlock},System.IO.Stream)">
            <summary>
            Writes the contents of <paramref name="dataQueue"/> to a binary output stream <paramref name="saveOut"/>.
            </summary>
            <param name="dataQueue">The data block queue that will be written to the binary output stream.</param>
            <param name="saveOut">The binary output stream on which to write the data.</param>
            <returns>The number of data blocks written to the binary output stream.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetBoardMode">
            <summary>
            Gets the 4-bit "board mode" input.
            </summary>
            <returns>
            The 4-bit "board mode" input.
            </returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetCableDelay(Rhythm.Net.BoardPort)">
            <summary>
            Gets the FPGA cable delay for selected SPI port.
            </summary>
            <param name="port">
            The SPI port for which to return the cable delay.
            </param>
            <returns>
            The FPGA cable delay for selected SPI port.
            </returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.GetCableDelay(System.Int32[])">
            <summary>
            Copies the FPGA cable delays for all SPI ports onto the specified array.
            </summary>
            <param name="delays">
            The array that will hold the the FPGA cable delays for all SPI ports.
            </param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000EvalBoard.Close">
            <summary>
            Closes the FPGA connection and releases any resources used by the
            <see cref="T:Rhythm.Net.Rhd2000EvalBoard"/>.
            </summary>
        </member>
        <member name="T:Rhythm.Net.Rhd2000Registers">
            <summary>
            This class creates and manages a data structure representing the internal RAM registers on a RHD2000 chip, and generates
            command lists to configure the chip and perform other functions.
            </summary>
            <remarks>
            Changing the value of variables within an instance of this class does not directly affect
            a RHD2000 chip connected to the FPGA; rather, a command list must be generated from this
            class and then downloaded to the FPGA board using <see cref="M:Rhythm.Net.Rhd2000EvalBoard.UploadCommandList(System.Collections.Generic.List{System.Int32},Rhythm.Net.AuxCmdSlot,System.UInt32)"/>.
            Typically, one instance of <see cref="T:Rhythm.Net.Rhd2000Registers"/> will be created for each RHD2000
            chip attached to the Rhythm interface. However, if all chips will receive the same MOSI
            commands, then only one instance of <see cref="T:Rhythm.Net.Rhd2000Registers"/> is required.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhythm.Net.Rhd2000Registers"/> class.
            Sets the RHD2000 register variables to default values.
            </summary>
            <param name="sampleRate">The per-channel sampling rate (in Hz) of the RHD2000 interface board.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.DefineSampleRate(System.Double)">
            <summary>
            Defines the RHD2000 per-channel sampling rate so that certain sample-rate-dependent registers are set correctly.
            </summary>
            <param name="newSampleRate">The per-channel sampling rate (in Hz) of the RHD2000 interface board.</param>
            <remarks>
            This function does not change the sampling rate of the FPGA; for this, use <see cref="M:Rhythm.Net.Rhd2000EvalBoard.SetSampleRate(Rhythm.Net.AmplifierSampleRate)"/>.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetFastSettle(System.Boolean)">
            <summary>
            Enables or disables amplifier fast settle function.
            </summary>
            <param name="enabled">Drive amplifiers to baseline if set to true.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetDigOutLow">
            <summary>
            Sets the auxiliary digital output variable to low state.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetDigOutHigh">
            <summary>
            Sets the auxiliary digital output variable to high state.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetDigOutHiZ">
            <summary>
            Sets the auxiliary digital output variable to high-impedance (HiZ) state.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.EnableAux1(System.Boolean)">
            <summary>
            Enables or disables ADC auxiliary input 1.
            </summary>
            <param name="enabled">Enables the ADC auxiliary input if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.EnableAux2(System.Boolean)">
            <summary>
            Enables or disables ADC auxiliary input 2.
            </summary>
            <param name="enabled">Enables the ADC auxiliary input if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.EnableAux3(System.Boolean)">
            <summary>
            Enables or disables ADC auxiliary input 3.
            </summary>
            <param name="enabled">Enables the ADC auxiliary input if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.EnableDsp(System.Boolean)">
            <summary>
            Enables or disables the DSP offset removal filter.
            </summary>
            <param name="enabled">Enables the DSP offset removal filter if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetDspCutoffFreq(System.Double)">
            <summary>
            Sets the DSP offset removal filter cutoff frequency as closely to the requested
            <paramref name="newDspCutoffFreq"/> (in Hz) as possible and returns the actual
            cutoff frequency (in Hz).
            </summary>
            <param name="newDspCutoffFreq">The desired DSP offset removal filter cutoff frequency (in Hz).</param>
            <returns>The actual cutoff frequency (in Hz).</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.GetDspCutoffFreq">
            <summary>
            Returns the current value of the DSP offset removal cutoff frequency (in Hz).
            </summary>
            <returns>The current value of the DSP offset removal cutoff frequency (in Hz).</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.EnableZcheck(System.Boolean)">
            <summary>
            Enables or disables impedance checking mode.
            </summary>
            <param name="enabled">Enables impedance checking mode if set to true or disables it if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetZcheckDacPower(System.Boolean)">
            <summary>
            Powers up or down impedance testing DAC.
            </summary>
            <param name="enabled">Powers up impedance testing DAC if set to true or powers it down if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetZcheckScale(Rhythm.Net.ZcheckCs)">
            <summary>
            Selects the series capacitor used to convert the voltage waveform generated by the on-chip
            DAC into an AC current waveform that stimulates a selected electrode for impedance testing.
            </summary>
            <param name="scale">The series capacitor used for impedance testing.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetZcheckPolarity(Rhythm.Net.ZcheckPolarity)">
            <summary>
            Selects impedance testing of positive or negative amplifier inputs (RHD2216 only).
            </summary>
            <param name="polarity">The amplifier input polarity to use for impedance testing.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetZcheckChannel(System.Int32)">
            <summary>
            Selects the amplifier channel (0-63) for impedance testing.
            </summary>
            <param name="channel">The amplifier channel (0-63) to use for impedance testing.</param>
            <returns>The selected amplifier channel if valid, -1 otherwise.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetAmpPowered(System.Int32,System.Boolean)">
            <summary>
            Powers up or down the selected amplifier on the RHD2000 chip.
            </summary>
            <param name="channel">The amplifier channel (0-63) to power up or down.</param>
            <param name="powered">Powers up the specified channel if set to true or powers it down if set to false.</param>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.PowerUpAllAmps">
            <summary>
            Powers up all amplifiers on the RHD2000 chip.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.PowerDownAllAmps">
            <summary>
            Powers down all amplifiers on the RHD2000 chip.
            </summary>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.GetRegisterValue(System.Int32)">
            <summary>
            Returns the value of a selected RAM register (0-17) on the RHD2000 chip, based
            on the current register variables in the class instance.
            </summary>
            <param name="reg">The selected RHD2000 RAM register (0-17).</param>
            <returns>The value of the selected RHD2000 RAM register.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetUpperBandwidth(System.Double)">
            <summary>
            Sets the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
            upper bandwidth (in Hz). Returns an estimate of the actual upper bandwidth achieved.
            </summary>
            <param name="upperBandwidth">The desired amplifier upper bandwidth (in Hz).</param>
            <returns>An estimate of the actual upper bandwidth achieved.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.SetLowerBandwidth(System.Double)">
            <summary>
            Sets the on-chip RL DAC values appropriately to set a particular amplifier
            lower bandwidth (in Hz). Returns an estimate of the actual lower bandwidth achieved.
            </summary>
            <param name="lowerBandwidth">The desired amplifier lower bandwidth (in Hz).</param>
            <returns>An estimate of the actual lower bandwidth achieved.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateCommandListRegisterConfig(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Creates a list of 60 commands to program most RAM registers on a RHD2000 chip, read those values
            back to confirm programming, read ROM registers, and, if calibrate is set to true, run ADC calibration.
            </summary>
            <param name="commandList">The command list that will be used for register configuration.</param>
            <param name="calibrate">Run ADC calibration if set to true.</param>
            <returns>The length of the command list.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateCommandListTempSensor(System.Collections.Generic.List{System.Int32})">
             <summary>
             Creates a list of 60 commands to sample auxiliary ADC inputs, temperature sensor,
             and supply voltage sensor.
             </summary>
             <param name="commandList">
             The command list that will be used to sample auxiliary ADC inputs, temperature sensor
             and supply voltage sensor.
             </param>
             <returns>The length of the command list.</returns>
             <remarks>
             One temperature reading (one sample of ResultA and one sample of ResultB)
             is taken during this 60-command sequence.  One supply voltage sample is taken.  Auxiliary
             ADC inputs are continuously sampled at 1/4 the amplifier sampling rate.
            
             Since this command list consists of writing to Register 3, it also sets the state of the
             auxiliary digital output.  If the digital output value needs to be changed dynamically,
             then variations of this command list need to be generated for each state and programmed into
             different RAM banks, and the appropriate command list selected at the right time.
             </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateCommandListUpdateDigOut(System.Collections.Generic.List{System.Int32})">
            <summary>
            Create a list of 60 commands to update Register 3 (controlling the auxiliary digital ouput
            pin) every sampling period.
            </summary>
            <param name="commandList">
            The command list that will be used to update Register 3 every sampling period.
            </param>
            <returns>The length of the command list.</returns>
            <remarks>
            Since this command list consists of writing to Register 3, it also sets the state of the
            on-chip temperature sensor.  The temperature sensor settings are therefore changed throughout
            this command list to coordinate with the 60-command list generated by
            <see cref="M:Rhythm.Net.Rhd2000Registers.CreateCommandListTempSensor(System.Collections.Generic.List{System.Int32})"/>.
            </remarks>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateCommandListZcheckDac(System.Collections.Generic.List{System.Int32},System.Double,System.Double)">
            <summary>
            Creates a list of up to 1024 commands to generate a sine wave of particular frequency (in Hz) and
            amplitude (in DAC steps, 0-128) using the on-chip impedance testing voltage DAC.
            </summary>
            <param name="commandList">The command list that will be used for impedance testing.</param>
            <param name="frequency">
            The frequency (in Hz) of the impedance testing voltage sine wave. If frequency is set to zero,
            a DC baseline waveform is created, which can be used when impedance testing is disabled to
            minimize on-chip noise.
            </param>
            <param name="amplitude">The amplitude (in DAC steps, 0-128) of the impedance testing voltage sine wave.</param>
            <returns>The length of the command list.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateRhd2000Command(Rhythm.Net.Rhd2000CommandType)">
            <summary>
            Returns a 16-bit MOSI command.
            </summary>
            <param name="commandType">The type of MOSI command to generate (CALIBRATE or CLEAR).</param>
            <returns>The 16-bit MOSI command.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateRhd2000Command(Rhythm.Net.Rhd2000CommandType,System.Int32)">
            <summary>
            Returns a 16-bit MOSI command.
            </summary>
            <param name="commandType">The type of MOSI command to generate (CONVERT or READ).</param>
            <param name="arg1">The register or channel to convert or read.</param>
            <returns>The 16-bit MOSI command.</returns>
        </member>
        <member name="M:Rhythm.Net.Rhd2000Registers.CreateRhd2000Command(Rhythm.Net.Rhd2000CommandType,System.Int32,System.Int32)">
            <summary>
            Returns a 16-bit MOSI command.
            </summary>
            <param name="commandType">The type of MOSI command to generate (WRITE).</param>
            <param name="arg1">The register on which to write.</param>
            <param name="arg2">The value to write on the specified register.</param>
            <returns>The 16-bit MOSI command.</returns>
        </member>
        <member name="T:Rhythm.Net.ZcheckCs">
            <summary>
            Specifies the series capacitors available for impedance testing.
            </summary>
        </member>
        <member name="F:Rhythm.Net.ZcheckCs.ZcheckCs100fF">
            <summary>
            Specifies that a series capacitor of 100fF should be used.
            </summary>
        </member>
        <member name="F:Rhythm.Net.ZcheckCs.ZcheckCs1pF">
            <summary>
            Specifies that a series capacitor of 1pF should be used.
            </summary>
        </member>
        <member name="F:Rhythm.Net.ZcheckCs.ZcheckCs10pF">
            <summary>
            Specifies that a series capacitor of 10pF should be used.
            </summary>
        </member>
        <member name="T:Rhythm.Net.ZcheckPolarity">
            <summary>
            Specifies the possible amplifier input polarities to use for impedance testing (RHD2216 only).
            </summary>
        </member>
        <member name="F:Rhythm.Net.ZcheckPolarity.ZcheckPositiveInput">
            <summary>
            Specifies that the positive amplifier input polarity should be used.
            </summary>
        </member>
        <member name="F:Rhythm.Net.ZcheckPolarity.ZcheckNegativeInput">
            <summary>
            Specifies that the negative amplifier input polarity should be used.
            </summary>
        </member>
        <member name="T:Rhythm.Net.Rhd2000CommandType">
            <summary>
            Specifies the available MOSI command codes.
            </summary>
        </member>
        <member name="F:Rhythm.Net.Rhd2000CommandType.Rhd2000CommandConvert">
            <summary>
            Specifies the MOSI convert command.
            </summary>
        </member>
        <member name="F:Rhythm.Net.Rhd2000CommandType.Rhd2000CommandCalibrate">
            <summary>
            Specifies the MOSI calibrate command.
            </summary>
        </member>
        <member name="F:Rhythm.Net.Rhd2000CommandType.Rhd2000CommandCalClear">
            <summary>
            Specifies the MOSI calibration clear command.
            </summary>
        </member>
        <member name="F:Rhythm.Net.Rhd2000CommandType.Rhd2000CommandRegWrite">
            <summary>
            Specifies the MOSI register write command.
            </summary>
        </member>
        <member name="F:Rhythm.Net.Rhd2000CommandType.Rhd2000CommandRegRead">
            <summary>
            Specifies the MOSI register read command.
            </summary>
        </member>
        <member name="T:Rhythm.Net.AmplifierSampleRate">
            <summary>
            Specifies the available per-channel sampling rates.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate1000Hz">
            <summary>
            Specifies a per-channel sampling rate of 1000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate1250Hz">
            <summary>
            Specifies a per-channel sampling rate of 1250Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate1500Hz">
            <summary>
            Specifies a per-channel sampling rate of 1500Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate2000Hz">
            <summary>
            Specifies a per-channel sampling rate of 2000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate2500Hz">
            <summary>
            Specifies a per-channel sampling rate of 2500Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate3000Hz">
            <summary>
            Specifies a per-channel sampling rate of 3000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate3333Hz">
            <summary>
            Specifies a per-channel sampling rate of 3333Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate4000Hz">
            <summary>
            Specifies a per-channel sampling rate of 4000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate5000Hz">
            <summary>
            Specifies a per-channel sampling rate of 5000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate6250Hz">
            <summary>
            Specifies a per-channel sampling rate of 6250Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate8000Hz">
            <summary>
            Specifies a per-channel sampling rate of 8000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate10000Hz">
            <summary>
            Specifies a per-channel sampling rate of 10000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate12500Hz">
            <summary>
            Specifies a per-channel sampling rate of 12500Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate15000Hz">
            <summary>
            Specifies a per-channel sampling rate of 15000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate20000Hz">
            <summary>
            Specifies a per-channel sampling rate of 20000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate25000Hz">
            <summary>
            Specifies a per-channel sampling rate of 25000Hz.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AmplifierSampleRate.SampleRate30000Hz">
            <summary>
            Specifies a per-channel sampling rate of 30000Hz.
            </summary>
        </member>
        <member name="T:Rhythm.Net.AuxCmdSlot">
            <summary>
            Specifies the available auxiliary command slots for SPI ports.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AuxCmdSlot.AuxCmd1">
            <summary>
            Specifies the auxiliary command slot 1.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AuxCmdSlot.AuxCmd2">
            <summary>
            Specifies the auxiliary command slot 2.
            </summary>
        </member>
        <member name="F:Rhythm.Net.AuxCmdSlot.AuxCmd3">
            <summary>
            Specifies the auxiliary command slot 3.
            </summary>
        </member>
        <member name="T:Rhythm.Net.BoardPort">
            <summary>
            Specifies the available board SPI ports.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardPort.PortA">
            <summary>
            Specifies the board SPI port A.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardPort.PortB">
            <summary>
            Specifies the board SPI port B.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardPort.PortC">
            <summary>
            Specifies the board SPI port C.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardPort.PortD">
            <summary>
            Specifies the board SPI port D.
            </summary>
        </member>
        <member name="T:Rhythm.Net.BoardDataSource">
            <summary>
            Specifies the available board SPI data sources for each port. The DDR (double data rate)
            sources are included to support future 64-channel RHD2000 chips that return MISO data
            on both the rising and falling edges of SCLK.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortA1">
            <summary>
            Specifies the board SPI port A1 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortA2">
            <summary>
            Specifies the board SPI port A2 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortB1">
            <summary>
            Specifies the board SPI port B1 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortB2">
            <summary>
            Specifies the board SPI port B2 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortC1">
            <summary>
            Specifies the board SPI port C1 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortC2">
            <summary>
            Specifies the board SPI port C2 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortD1">
            <summary>
            Specifies the board SPI port D1 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortD2">
            <summary>
            Specifies the board SPI port D2 data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortA1Ddr">
            <summary>
            Specifies the board SPI port A1 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortA2Ddr">
            <summary>
            Specifies the board SPI port A2 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortB1Ddr">
            <summary>
            Specifies the board SPI port B1 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortB2Ddr">
            <summary>
            Specifies the board SPI port B2 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortC1Ddr">
            <summary>
            Specifies the board SPI port C1 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortC2Ddr">
            <summary>
            Specifies the board SPI port C2 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortD1Ddr">
            <summary>
            Specifies the board SPI port D1 DDR data source.
            </summary>
        </member>
        <member name="F:Rhythm.Net.BoardDataSource.PortD2Ddr">
            <summary>
            Specifies the board SPI port D2 DDR data source.
            </summary>
        </member>
        <member name="T:Rhythm.Net.DacManual">
            <summary>
            Specifies the available manual AD5662 DAC control WireIns on the FPGA.
            </summary>
        </member>
        <member name="F:Rhythm.Net.DacManual.DacManual1">
            <summary>
            Specifies the first manual AD5662 DAC control WireIn.
            </summary>
        </member>
        <member name="F:Rhythm.Net.DacManual.DacManual2">
            <summary>
            Specifies the second manual AD5662 DAC control WireIn.
            </summary>
        </member>
    </members>
</doc>
